<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TaoLiu-Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-18T02:33:28.675Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tao Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA数据结构和算法</title>
    <link href="http://example.com/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</id>
    <published>2022-05-12T09:35:21.866Z</published>
    <updated>2022-05-18T02:33:28.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA数据结构和算法："><a href="#JAVA数据结构和算法：" class="headerlink" title="JAVA数据结构和算法："></a>JAVA数据结构和算法：</h1><hr><p><code>数据结构分类：线性结构和非线性结构：</code></p><h1 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h1><p><code>什么是线性和非线性；</code></p><p>个人的理解是：数据结构中线性结构指的是数据元素之间存在着“一对一”的线性关系的数据结构；<br>线性结构包括：数组，链表，队列，栈；<br>非线性结构包括：树，图，表；</p><p>详解：<br>一.线性结构</p><p>1.数组<br>特点：我们都知道数组中的元素在内存中连续存储的，可以根据是下标快速访问元素，因此，查询速度很快，然而插入和删除时，需要对元素移动空间，比较慢。<br>数组使用场景：频繁查询，很少增加和删除的情况。</p><p>2.链表<br>特点：元素可以不连续内存中，是以索引将数据联系起来的，当查询元素的时候需要从头开始查询，所以效率比较低，然而添加和删除的只需要修改索引就可以了<br>链表使用场景：少查询，需要频繁的插入或删除情况</p><p>3.队列<br>特点：先进先出，<br>队列使用场景：多线程阻塞队列管理非常有用</p><p>4.栈<br>特点：先进后出，就像一个箱子，<br>栈使用场景：实现递归以及表示式</p><p>5.数组与链表的区别<br>数组连续，链表不连续（从数据存储形式来说）<br>数组内存静态分配，链表动态分配<br>数组查询复杂度O(1)，链表查询复杂度O(n)<br>数组添加或删除，复杂度O(n),链表添加删除，复杂度O(1)<br>数组从栈中分配内存。链表从堆中分配内存。</p><p><code>补充：时间复杂度O(1), O(n), O(logn), O(nlogn)指什么 </code><br>  描述算法复杂度时,常用o(1), o(n), o(logn), o(nlogn)表示对应算法的时间复杂度，是算法的时空复杂度的表示。不仅仅用于表示时间复杂度，也用于表示空间复杂度。<br>O后面的括号中有一个函数，指明某个算法的耗时&#x2F;耗空间与数据增长量之间的关系。其中的n代表输入数据的量。</p><blockquote><p>O(1)：<br>  是最低的时空复杂度了，代表耗时&#x2F;耗空间与输入数据大小无关，无论输入数据增大多少倍，耗时&#x2F;耗空间都不变。 <code>哈希算法</code>就是典型的O(1)时间复杂度，无论数据规模多大，都可以在一次计算后找到目标（不考虑冲突的话）</p></blockquote><blockquote><p> O(n)：<br> 代表数据量增大几倍，耗时也增大几倍。比如常见的<code>遍历算法</code>。</p></blockquote><blockquote><p>O(n^2)：<br>  代表数据量增大n倍时，耗时增大n的平方倍，这是比线性更高的时间复杂度。比如<code>冒泡排序</code>，就是典型的O(n^2)的算法，对n个数排序，需要扫描n×n次。</p></blockquote><blockquote><p>O(logn)：<br>  代表当数据增大n倍时，耗时增大logn倍（这里的log是以2为底的，比如，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度）。<code>二分查找</code>就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标。</p></blockquote><blockquote><p>O(nlogn)：<br>  代表n乘以logn，当数据增大256倍时，耗时增大256*8&#x3D;2048倍。这个复杂度高于线性低于平方。<code>归并排序</code>就是O(nlogn)的时间复杂度。</p></blockquote><hr><h1 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h1><p>c1）插入排序（直接插入排序、希尔排序） </p><blockquote><p>2）交换排序（冒泡排序、快速排序）<br>3）选择排序（直接选择排序、堆排序）<br>4）归并排序<br>5）分配排序（基数排序）<br><code>特点:</code><br>所需辅助空间最多：归并排序<br>所需辅助空间最少：堆排序<br>平均速度最快：快速排序<br>不稳定：快速排序，希尔排序，堆排序</p></blockquote><ul><li>直接插入排序<blockquote><p>基本思想：在要排序的一组数中，假设前面(n-1)[n&gt;&#x3D;2] 个数已经是排好顺序的，现在要把第n 个数插到前面的有序数中，使得这 n个数也是排好顺序的。如此反复循环，直到全部排好顺序</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">     * 插入排序法 </span><br><span class="line">     *  </span><br><span class="line">     * @param datas </span><br><span class="line">     */  </span><br><span class="line">    public static int[] sortInsert(int[] datas) &#123;  </span><br><span class="line">        for (int i = 1; i &lt; datas.length; i++) &#123;  </span><br><span class="line">            int j = i - 1;  </span><br><span class="line">            AlgorithmUtil.temp = datas[i];  </span><br><span class="line">            for (; j &gt;= 0 &amp;&amp; AlgorithmUtil.temp &lt; datas[j]; j--) &#123;  </span><br><span class="line">                datas[j + 1] = datas[j];  </span><br><span class="line">            &#125;  </span><br><span class="line">            datas[j + 1] = AlgorithmUtil.temp;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return datas;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><ul><li>简单选择排序 <blockquote><p>基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">    * 选择排序 </span><br><span class="line">    *  </span><br><span class="line">    * @return </span><br><span class="line">    */  </span><br><span class="line">   public static int[] sortSelect(int[] datas) &#123;  </span><br><span class="line">       for (int i = 0; i &lt; datas.length; i++) &#123;  </span><br><span class="line">           int index = i;  </span><br><span class="line">           for (int j = i + 1; j &lt; datas.length; j++) &#123;  </span><br><span class="line">               if (datas[j] &lt; datas[index])  </span><br><span class="line">                   index = j;  </span><br><span class="line">           &#125;  </span><br><span class="line">           if (i != index)  </span><br><span class="line">               AlgorithmUtil.swap(datas, i, index);  </span><br><span class="line">       &#125;  </span><br><span class="line">       return datas;  </span><br><span class="line">   &#125;  </span><br></pre></td></tr></table></figure><ul><li>冒泡排序<blockquote><p>基本思想：在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">     * 冒泡排序 </span><br><span class="line">     *  </span><br><span class="line">     * @return </span><br><span class="line">     */  </span><br><span class="line">    public static int[] sortBubble(int[] datas) &#123;  </span><br><span class="line">        for (int i = 0; i &lt; datas.length - 1; i++) &#123;  </span><br><span class="line">            for (int j = 0; j &lt; datas.length - 1 - i; j++) &#123;  </span><br><span class="line">                if (datas[j] &gt; datas[j + 1])  </span><br><span class="line">                    AlgorithmUtil.swap(datas, j, j + 1);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return datas;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><ul><li>快速排序<blockquote><p>基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">     * 快速排序；分割数组 </span><br><span class="line">     *  </span><br><span class="line">     * @param datas </span><br><span class="line">     */  </span><br><span class="line">    public static int QuickPartition(int[] datas, int left, int right) &#123;  </span><br><span class="line">        int pivot = datas[left];  </span><br><span class="line">        while (left &lt; right) &#123;  </span><br><span class="line">            while (left &lt; right &amp;&amp; datas[right] &gt;= pivot)  </span><br><span class="line">                --right;  </span><br><span class="line">            datas[left] = datas[right]; // 将比枢轴小的元素移到低端，此时right位相当于空，等待低位比pivotkey大的数补上  </span><br><span class="line">            while (left &lt; right &amp;&amp; datas[left] &lt;= pivot)  </span><br><span class="line">                ++left;  </span><br><span class="line">            datas[right] = datas[left]; // 将比枢轴大的元素移到高端，此时left位相当于空，等待高位比pivotkey小的数补上  </span><br><span class="line">        &#125;  </span><br><span class="line">        datas[left] = pivot; // 当left == right，完成一趟快速排序，此时left位相当于空，等待pivotkey补上  </span><br><span class="line">        return left;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /** </span><br><span class="line">     * 快速排序；递归返回数组 </span><br><span class="line">     *  </span><br><span class="line">     * @param datas </span><br><span class="line">     */  </span><br><span class="line">    public static int[] sortQuick(int[] datas, int left, int right) &#123;  </span><br><span class="line">        if (left &lt; right) &#123;  </span><br><span class="line">            int data = QuickPartition(datas, left, right);  </span><br><span class="line">            sortQuick(datas, left, data - 1);  </span><br><span class="line">            sortQuick(datas, data + 1, right);  </span><br><span class="line">        &#125;  </span><br><span class="line">        return datas;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><ul><li>1.冒泡算法，2.选择算法，3.快速算法。4.插入算法，5.希尔算法，6.堆算法<blockquote><p>基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class AlgorithmUtil &#123;  </span><br><span class="line"></span><br><span class="line">public static int temp,index = 0;  </span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line"> * 临时值交换 </span><br><span class="line"> *  </span><br><span class="line"> * @param datas </span><br><span class="line"> *            数组 </span><br><span class="line"> * @param i </span><br><span class="line"> * @param j </span><br><span class="line"> */  </span><br><span class="line">public static void swap(int[] datas, int i, int j) &#123;  </span><br><span class="line">    temp = datas[i];  </span><br><span class="line">    datas[i] = datas[j];  </span><br><span class="line">    datas[j] = temp;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line"> * 扩充数组长度 </span><br><span class="line"> *  </span><br><span class="line"> * @param datas </span><br><span class="line"> * @param value </span><br><span class="line"> * @return </span><br><span class="line"> */  </span><br><span class="line">public static int[] expandArray(int[] datas, int value) &#123;  </span><br><span class="line">    if (datas.length &lt;= index) &#123;  </span><br><span class="line">        int[] arrays = new int[datas.length * 2];  </span><br><span class="line">        System.arraycopy(datas, 0, arrays, 0, datas.length);  </span><br><span class="line">        datas = arrays;  </span><br><span class="line">    &#125;  </span><br><span class="line">    datas[index] = value;  </span><br><span class="line">    index++;  </span><br><span class="line">    return datas;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JAVA数据结构和算法：&quot;&gt;&lt;a href=&quot;#JAVA数据结构和算法：&quot; class=&quot;headerlink&quot; title=&quot;JAVA数据结构和算法：&quot;&gt;&lt;/a&gt;JAVA数据结构和算法：&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;数据结构分类：线性结构和非线性结构：&lt;</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="JAVA数据结构和算法" scheme="http://example.com/tags/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello hexo</title>
    <link href="http://example.com/blog/hello-hexo/"/>
    <id>http://example.com/blog/hello-hexo/</id>
    <published>2022-05-12T09:35:21.839Z</published>
    <updated>2022-05-12T09:03:14.613Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch基础</title>
    <link href="http://example.com/blog/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/ElasticSearch/ElasticSearch%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/blog/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/ElasticSearch/ElasticSearch%E5%9F%BA%E7%A1%80/</id>
    <published>2022-01-01T16:00:00.000Z</published>
    <updated>2022-05-18T10:22:00.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch是什么？"><a href="#Elasticsearch是什么？" class="headerlink" title="Elasticsearch是什么？"></a>Elasticsearch是什么？</h2><ul><li><strong><code>Elasticsearch</code><strong>是用</strong>Java<code>开发</code><strong>的当前</strong>最流行</strong>的<strong>开源</strong>的企业级搜索引擎，能够达到<strong>实时搜索</strong>，<strong>稳定</strong>，<strong>可靠</strong>，<strong>快速</strong>，安装使用方便。  </li><li>和<code>Solr</code>一样的，**<code>Elasticsearch</code><strong>是基于</strong><code>Lucene</code><strong>进行了封装， 提供了更为便利的访问和调用, Lucene可被认为是迄今为止</strong>最先进<strong>、</strong>性能最好<strong>、</strong>功能最全<strong>的</strong>搜索引擎框架**。</li></ul><h2 id="ES与Solr对比："><a href="#ES与Solr对比：" class="headerlink" title="ES与Solr对比："></a>ES与Solr对比：</h2><p>单纯对<strong>已有数据</strong>进行搜索时 <strong><code>Solr</code>更快</strong>，当<strong>实时建立索引</strong>时Solr会产生 <strong><code>IO</code>阻塞</strong>，查询性能较差，该情况下  <strong><code>Elasticsearch</code></strong> 具有明显优势。</p><ul><li><strong><code>Solr</code>利用<code>Zookeeper</code>进行分布式管理</strong>，而 <strong><code>Elasticsearch</code>自带分布式协调管理</strong>功能</li><li><strong><code>Solr</code>支持更多格式数据</strong>，如JSON、XML、CSV，而 <strong><code>Elasticsearch</code>仅支持<code>JSON</code>文件格式</strong></li><li>Solr在<strong>传统搜索应用</strong>中表现好于Elasticsearch，但在处理<strong>实时搜索应用</strong>时效率明显低于Elasticsearch</li><li>Solr是传统搜索应用的有力解决方案，但Elasticsearch更适用于<strong>新兴实时搜索</strong>应用。</li></ul><h2 id="ES与关系型数据库"><a href="#ES与关系型数据库" class="headerlink" title="ES与关系型数据库:"></a>ES与关系型数据库:</h2><table>    <thead>        <tr>            <th>关系型数据库</th>            <th>Database数据库</th>            <th>Table表</th>            <th>ROW行</th>            <th>Column列</th>        </tr>    </thead>    <tbody>        <tr>            <td><strong>Elasticsearch</strong></td>            <td><strong>Index索引库</strong></td>            <td><strong>Type类型</strong></td>            <td><strong>Document文档</strong></td>            <td><strong>Field字段</strong></td>        </tr>    </tbody></table><h2 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念:"></a>ES核心概念:</h2><ul><li>索引index:<br>一个索引就是一个拥有几分相似特征的<strong>文档集合</strong>，相当于关系型数据库中的database，一个索引由一个名字来标识，<strong>必须全部是小写字母</strong>，且当要对对应于该索引中的文档进行索引<strong>搜索</strong>、<strong>更新</strong>和<strong>删除</strong>时，都要使用该名字。</li><li>Mapping映射:<br>ElasticSearch中的<strong>Mapping映射用来定义一个文档</strong>，Mapping是<strong>处理数据的方式</strong>和<strong>规则</strong>方面做一些限制，如某个<strong>字段</strong>的<strong>数据类型</strong>、<strong>默认值</strong>、<strong>分词器</strong>、<strong>是否被索引</strong>等，这都是映射里面可设置的。</li><li>Field字段:<br>相当于是数据表的字段或列。</li><li>Type字段类型：<br><strong>每个字段</strong>都应该有一个对应的<strong>类型</strong>，如 <strong><code>Text</code><strong>、</strong><code>Keyword</code><strong>、</strong><code>Byte</code></strong> 等。</li><li>Document文档：<br>一个文档是一个<strong>可被索引的基础信息单元</strong>，类似一条记录，<strong>文档以<code>JSON</code>格式来表示</strong>。</li><li>Cluster集群：<br>一个集群由<strong>一个</strong>或<strong>多个</strong>节点组织在一起，<strong>共同持有整个数据</strong>，并<strong>一起提供索引和搜索功能</strong></li><li>Node节点：<br>一个节点即集群中一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能，一个节点<strong>可通过配置集群名称的方式来加入一个指定的集群</strong>。默认每个节点都会被安排加入到一个叫做 <strong><code>elasticsearch</code><strong>的集群中。<br><strong>一个集群中可拥有任意多个节点</strong>，且若当前网络中没有运行任何</strong><code>Elasticsearch</code><strong>节点，这时启动一个节点，会默认</strong>创建并加入</strong>一个叫做 <strong><code>elasticsearch</code></strong> 的集群。</li><li>分片：<br><strong>一个索引</strong>可存储<strong>超出单个结点硬件限制</strong>的大量数据，如一个具有10亿文档的索引占据1TB磁盘空间，而任一节点都没有这样大的磁盘空间，或者单个节点处理搜索请求，响应太慢，为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，每一份就是一个分片。<br>当<strong>创建索引时可指定分片数量</strong>，<strong>每个分片</strong>本身也是一个<strong>功能完善且独立的索引</strong>，该分片可被放置到集群中任何节点上，<strong>分片允许水平分割扩展内容容量</strong>，允许在分片之上进行<strong>分布式</strong>并行操作，进而提高<strong>性能</strong>和<strong>吞吐量</strong>，每个<strong>分片怎样分布</strong>，<strong>文档怎样聚合</strong>回搜索请求，完全<strong>由<code>Elasticsearch</code>管理</strong>，对于用户透明</li><li>副本：<br>在一个网络环境中，失败随时都可能发生，在某个分片或节点处于离线状态，或由于任何原因消失，该情况下有一个<strong>故障转移机制</strong>是非常有用且强烈推荐。为此 <strong><code>Elasticsearch</code>允许创建分片的一份或多份拷贝</strong>，这些拷贝叫做<strong>副本分片</strong>或直接叫<strong>副本</strong>。<br>扩展搜索量和吞吐量，搜索可在所有的副本上并行运行，<strong>每个索引可被分成多个分片</strong>，<strong>一个索引有零个或者多个副本</strong>， 一旦设置了副本，每个索引就有了<strong>主分片</strong>和<strong>副本分片</strong>，<strong>分片和副本数量可在索引创建时指定</strong>，在索引创建后，<strong>可在任何时候动态地改变副本数量</strong>，但<strong>不能改变分片数量</strong>。</li></ul><h1 id="ES安装"><a href="#ES安装" class="headerlink" title="ES安装"></a>ES安装</h1><p><strong>注：</strong> ES不能使用root用户来启动，必须使用普通用户来安装启动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">groupadd elasticsearch # 创建elasticsearch用户组</span><br><span class="line">useradd eleven # 创建eleven用户</span><br><span class="line">passwd eleven  # 给eleven用户设置密码为eleven</span><br><span class="line">usermod -G elasticsearch eleven # 将用户eleven添加到elasticsearch用户组</span><br><span class="line"></span><br><span class="line">mkdir -p /usr/local/es # 创建es文件夹</span><br><span class="line">chown -R eleven /usr/local/es/elasticsearch-7.6.1 # 修改owner为eleven用户</span><br><span class="line"></span><br><span class="line">visudo # 使用root用户执行visudo命令然后为es用户添加权限</span><br><span class="line">eleven ALL=(ALL) ALL # 在root ALL=(ALL) ALL 一行下面添加eleven用户</span><br></pre></td></tr></table></figure><p>修改elasticsearch.yml，可通过修改jvm.options配置文件调整JVM参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: eleven-es# 集群名称</span><br><span class="line">node.name: node1# 节点名称</span><br><span class="line">path.data: /usr/local/es/elasticsearch-7.6.1/data # 数据目录</span><br><span class="line">path.logs: /usr/local/es/elasticsearch-7.6.1/log  # 日志目录</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.seed_hosts: [&quot;IP1&quot;, &quot;IP2&quot;, &quot;IP3&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;节点1名称&quot;, &quot;节点2名称&quot;, &quot;节点3名称&quot;]</span><br><span class="line">bootstrap.system_call_filter: false</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><p>ES需要大量创建索引文件，需要大量打开系统文件，所以需要解除linux系统当中打开文件最大数目限制，不然ES启动会抛错：<span style="color: red">max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/security/limits.conf</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure><p>若出现<span style="color: red">max number of threads [1024] for user [es] likely too low, increase to at least [4096]</span> 错误信息，是由于<strong>普通用户启动线程数限制最大可创建线程数太小</strong>，无法创建本地线程问题。</p><h2 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h2><p>使用ElasticSearch来进行<strong>中文分词</strong>，需要单独给Elasticsearch安装IK分词器插件，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/es/elasticsearch-7.6.1/plugins/ik</span><br><span class="line">cd /usr/local/es/elasticsearch-7.6.1/plugins/ik</span><br><span class="line">unzip elasticsearch-analysis-ik-7.6.1.zip</span><br></pre></td></tr></table></figure><p>ES的默认分词设置是 <strong><code>standard</code>单字拆分</strong>，可使用<strong>IK分词器</strong>的 <strong><code>ik_smart</code><strong>和</strong><code>ik_max_word</code><strong>分词方式，</strong><code>ik_smart</code><strong>会做</strong>最粗粒度拆分</strong>，**<code>ik_max_word</code><strong>会将文本做</strong>最细粒度拆分**。修改默认分词方法，修改 <strong><code>eleven_index</code>索引</strong>的默认分词为 <strong><code>ik_max_word</code></strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /school_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;analysis.analyzer.default.type&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;中华人民共和国&quot;</span><br><span class="line">&#125;</span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;中华人民共和国&quot;</span><br><span class="line">&#125;</span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;中华人民共和国&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES基础"><a href="#ES基础" class="headerlink" title="ES基础"></a>ES基础</h2><p>ES是<strong>面向文档<code>Document</code><strong>的，</strong>使用<code>JSON</code>作为文档序列化格式</strong>，这其<strong>可存储整个对象或文档<code>Document</code><strong>，不仅仅是存储，还会</strong>索引<code>index</code>每个文档内容使之可被搜索</strong>。ES中可对<strong>文档而非成行成列的数据进行索引</strong>、<strong>搜索</strong>、<strong>排序</strong>、<strong>过滤</strong>。</p><p><strong>条件查询</strong>：<br><strong><code>GET /索引名称/类型/_search?q=字段1:字段值，字段2:字段值</code><strong>，条件之间是通过</strong>逗号分隔多个条件</strong>，如<strong>分页</strong>、<strong>排序</strong>、<strong>输出指定字段</strong>等通过 <strong><code>&amp;</code>符号分隔</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/nodes?v// 查看集群节点状态</span><br><span class="line">GET _cat/health?v// 查看集群健康状态</span><br><span class="line"></span><br><span class="line">GET /es_db // 查询索引：GET /索引名称</span><br><span class="line">PUT /es_db// 创建索引：PUT /索引名称</span><br><span class="line">DELETE /es_db// 删除索引：DELETE /索引名称</span><br><span class="line">PUT /es_db/_doc/1 // 添加文档：PUT /索引名称/类型/id</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;sex&quot;: 1,</span><br><span class="line">  &quot;age&quot;: 25,</span><br><span class="line">  &quot;address&quot;: &quot;广州天河公园&quot;,</span><br><span class="line">  &quot;remark&quot;: &quot;java developer&quot;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_doc/1 // 查询文档：GET /索引名称/类型/id</span><br><span class="line">DELETE /es_db/_doc/1// 删除文档：DELETE /索引名称/类型/id</span><br><span class="line">GET /es_db/_doc/_search // 查询当前类型中的所有文档：GET /索引名称/类型/_search</span><br><span class="line">GET /es_db/_doc/_search?q=age:28 // 条件查询：GET /索引名称/类型/_search?q=*:***</span><br><span class="line">GET /es_db/_doc/_search?q=age[25 TO 26] // 范围查询：GET /索引名称/类型/_search?q=***[** TO **]</span><br><span class="line">GET /es_db/_doc/_mget // 根据多个ID进行批量查询：GET /索引名称/类型/_mget</span><br><span class="line">&#123;&quot;ids&quot;:[&quot;1&quot;,&quot;2&quot;]&#125;</span><br><span class="line">GET /es_db/_doc/_search?q=age:&lt;=28 // 查询小于等于：GET /索引名称/类型/_search?q=age:&lt;=**</span><br><span class="line">GET /es_db/_doc/_search?q=age:&gt;=28 // 查询大于等于：GET /索引名称/类型/_search?q=age:&gt;=**</span><br><span class="line">GET /es_db/_doc/_search?q=age[25 TO 26]&amp;from=0&amp;size=1 // 分页查询：from=*&amp;size=*</span><br><span class="line">GET /es_db/_doc/_search?_source=name,age // 对查询结果只输出某些字段：_search?_source=字段,字段</span><br><span class="line">GET /es_db/_doc/_search?q=age[25 TO 26],sex:0 // 多条件查询</span><br><span class="line">GET /es_db/_doc/_search?sort=age:desc // 对查询结果排序sort=字段:desc/asc</span><br></pre></td></tr></table></figure><p><strong><code>ES</code><strong>是</strong>基于<code>Restful API</code><strong>和所有客户端交互都是使用</strong><code>JSON</code>格式</strong>数据，其他所有程序语言都可使用RESTful API，通过9200端口的与ES进行通信，GET查询、PUT添加、POST修改、DELETE删除，**<code>POST</code><strong>和</strong><code>PUT</code><strong>都能起到</strong>创建&#x2F;更新**的作用：  </p><ul><li><strong><code>PUT</code>需要对一个具体的资源进行操作</strong>，也就是要确定id才能进行<strong>更新&#x2F;创建</strong>，而 <strong><code>POST</code>可针对整个资源集合进行操作</strong>，若<strong>不写<code>id</code>则由<code>ES</code>生成一个唯一<code>id</code>进行创建新文档</strong>，过填了id则针对该id文档进行<strong>创建&#x2F;更新</strong></li><li><strong><code>PUT</code>会将<code>JSON</code>数据都进行替换，<code>POST</code>只会更新相同字段的值</strong></li><li><strong><code>PUT</code>与<code>DELETE</code>都是幂等性操作</strong>，不论操作多少次结果都一样</li></ul><h2 id="文档批量操作"><a href="#文档批量操作" class="headerlink" title="文档批量操作"></a>文档批量操作</h2><p>通过 <strong><code>_mget</code></strong> 的API来实现 <strong>批量操作多个文档</strong>，可通过 <strong><code>_id</code></strong> 批量获取 <strong>不同<code>index</code>和<code>type</code>的数据</strong>，若查询的是同一个文档可<strong>将<code>index</code>和<code>type</code>放到URL上</strong>。且可 <strong>通过<code>_source</code>指定查询字段</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET _mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;es_db_1&quot;,</span><br><span class="line">      &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot;: 1,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;es_db&quot;,</span><br><span class="line">      &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot;: 2</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_doc/_mget?_source=age,name</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_id&quot;: 2</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>批量</strong>对文档进行<strong>写操作</strong>是通过 <strong><code>_bulk</code><strong>的API来实现的，通过 <strong><code>_bulk</code><strong>写操作文档，一般至少有两行参数，第一行参数为指定</strong>操作的类型</strong>及</strong>操作的对象</strong>如index、type、id，第二行参数为<strong>操作的数据</strong>。**<code>actionName</code><strong>表示</strong>操作类型**，主要有 **<code>create</code><strong>、</strong><code>index</code><strong>、</strong><code>delete</code><strong>、</strong><code>update</code>**。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;actionName&quot;: &#123;</span><br><span class="line">    &quot;_index&quot;: &quot;indexName&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;typeName&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;id&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field1&quot;: &quot;value1&quot;,</span><br><span class="line">  &quot;field2&quot;: &quot;value2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;actionName&quot;: &#123;</span><br><span class="line">    &quot;_index&quot;: &quot;indexName&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;typeName&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;id&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field1&quot;: &quot;value1&quot;,</span><br><span class="line">  &quot;field2&quot;: &quot;value2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乐观并发控制"><a href="#乐观并发控制" class="headerlink" title="乐观并发控制"></a>乐观并发控制</h2><p>在数据库领域中，有<strong>悲观并发控制</strong>和<strong>乐观并发控制</strong>两种方法来<strong>确保并发更新</strong>不丢失数据，<strong>悲观并发控制</strong>被<strong>关系型数据库</strong>广泛使用，阻塞访问资源以防止冲突；<strong>ES使用乐观并发控制</strong>，若源数据在读写当中被修改，更新将会失败。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /db_index/_doc/1?if_seq_no=1&amp;if_primary_term=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Jack&quot;,</span><br><span class="line">  &quot;sex&quot;: 1,</span><br><span class="line">  &quot;age&quot;: 25,</span><br><span class="line">  &quot;book&quot;: &quot;Spring Boot 入门到精通2&quot;,</span><br><span class="line">  &quot;remark&quot;: &quot;hello world2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>ES老版本</strong>是使用 <strong><code>version</code><strong>字段来乐观并发控制，新版本7.x使用</strong><code>if_seq_no</code>&#x3D;文档版本号&amp;<code>if_primary_term</code>&#x3D;文档位置</strong>来乐观并发控制。  </li><li>每当Primary Shard发生重新分配时如<strong>重启</strong>、**<code>Primary</code>选举<strong>等，</strong><code>_primary_term</code>会递增<code>1</code><strong>，</strong><code>_primary_term</code><strong>主要是用来</strong>恢复数据时**处理当多个文档的 <strong><code>_seq_no</code>一样</strong>时的冲突。  </li><li>如当一个shard宕机了，<code>raplica</code>需要用到最新的数据，就会根据<code>_primary_term</code>和<code>_seq_no</code>两个值来拿到最新的document。</li></ul><h2 id="文档映射"><a href="#文档映射" class="headerlink" title="文档映射"></a>文档映射</h2><p>ES中映射可以分为<strong>动态映射</strong>和<strong>静态映射</strong>，在关系数据库中，需要事先在数据库下创建数据表，并创建表字段、类型、长度、主键等，最后才能基于表插入数据。而Elasticsearch中<strong>不需要定义<code>Mapping</code>映射</strong>，在<strong>文档写入ES时</strong>，会<strong>根据文档字段自动识别类型</strong>，该机制为<strong>动态映射</strong>；也可<strong>事先定义好映射</strong>，包含文档的各<strong>字段类型</strong>、<strong>分词器</strong>等，该方式为<strong>静态映射</strong>  </p><ul><li><strong>字符串</strong>：**<code>string</code>类型包含<code>text</code>和<code>keyword</code>**</li><li><strong><code>text</code><strong>：该类型被用来</strong>索引长文本</strong>，创建索引前会<strong>将文本进行分词</strong>，转化为词的组合，建立索引；允许es来检索这些词，<strong>不能用来排序和聚合</strong></li><li><strong><code>keyword</code><strong>：该类型</strong>不能分词</strong>，可被用来<strong>检索过滤</strong>、<strong>排序</strong>和<strong>聚合</strong>，<strong>不可用<code>text</code>进行分词模糊检索</strong></li><li><strong>数值型</strong>：**<code>long</code><strong>、</strong><code>integer</code><strong>、</strong><code>short</code><strong>、</strong><code>byte</code><strong>、</strong><code>double</code><strong>、</strong><code>float</code>**</li><li><strong>日期型</strong>：**<code>date</code>**</li><li><strong>布尔型</strong>：**<code>boolean</code>**</li></ul><p><img src="/../../../../assets/png/ElasticSearch/%E5%8A%A8%E6%80%81%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99.png" alt="动态映射规则"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_mapping // 获取文档映射</span><br><span class="line">    </span><br><span class="line">PUT /es_db2 // 创建索引且设置文档映射</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;sex&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;book&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;, // 指定text类型的ik分词器</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_smart&quot; // 指定text类型的ik分词器</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要<strong>推倒现有的映射</strong>，得<strong>重新建立一个静态索引</strong>，然后把之前索引里的数据<strong>导入到新的索引</strong>里，<strong>删除原创建的索引</strong>，<strong>为新索引起个别名</strong>，为原索引名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST _reindex // 把之前索引里的数据导入到新的索引里</span><br><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;db_index&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dest&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;db_index_2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">DELETE /db_index// 删除原创建的索引</span><br><span class="line">PUT /db_index_2/_alias/db_index// 为新索引起个别名, 为原索引名</span><br></pre></td></tr></table></figure><p>若要<strong>推倒现有的映射</strong>，得<strong>重新建立一个静态索引</strong>，然后把之前索引里的数据<strong>导入到新的索引</strong>里，<strong>删除原创建的索引</strong>，<strong>为新索引起个别名</strong>，为原索引名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST _reindex // 把之前索引里的数据导入到新的索引里</span><br><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;db_index&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dest&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;db_index_2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">DELETE /db_index// 删除原创建的索引</span><br><span class="line">PUT /db_index_2/_alias/db_index// 为新索引起个别名, 为原索引名</span><br></pre></td></tr></table></figure><h2 id="DSL高级查询"><a href="#DSL高级查询" class="headerlink" title="DSL高级查询"></a>DSL高级查询</h2><p><strong><code>Domain Specific Language</code>领域专用语言</strong>，由<strong>叶子查询子句</strong>和<strong>复合查询子句</strong>两种子句组成。DSL查询语言又分为<strong>查询<code>DSL</code><strong>和</strong>过滤<code>DSL</code><strong>。ES中索引的数据都会存储一个 <strong><code>_score</code><strong>分值，</strong>分值越高就代表越匹配</strong>，</strong>查询上下文</strong>中不仅要判断查<strong>询条件与文档是否匹配</strong>，且还要关心<strong>相关度</strong>即 <strong><code>_score</code><strong>分值，需要根据分值排序；过</strong>滤器上下文</strong>中值关心<strong>查询条件与文档是否匹配</strong>，不计算 <strong><code>_score</code><strong>分值，</strong>不关心排序</strong>问题，经常使用过滤器，ES会<strong>自动缓存过滤器内容</strong>。</p><p><img src="/../../../../assets/png/ElasticSearch/DSL%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2.png" alt="DSL高级查询"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_doc/_search // 无查询条件是查询所有，默认查询所有，或使用match_all表示所有</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="叶子查询"><a href="#叶子查询" class="headerlink" title="叶子查询"></a>叶子查询</h2><h3 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h3><p><strong>模糊匹配</strong>主要是针对<strong>文本类型</strong>的字段，文本类型的字段会对<strong>内容进行分词</strong>，<strong>查询时也会对搜索条件进行分词</strong>，然后通过<strong>倒排索引</strong>查找到匹配数据，模糊匹配主要通过 <strong><code>match</code></strong> 等参数来实现  </p><ul><li><strong><code>match</code><strong>：通过</strong>match关键词模糊匹配</strong>条件内容，<strong>需指定字段名</strong>，<strong>会进行分词</strong><ul><li><strong><code>query</code><strong>：</strong>指定匹配的值</strong></li><li><strong><code>operator</code><strong>：</strong>匹配条件类型</strong><ul><li><strong><code>and</code><strong>：条件分词后</strong>都</strong>要匹配</li><li><strong><code>or</code><strong>：条件分词后</strong>有一个</strong>匹配即可，默认为or</li></ul></li><li><strong><code>minmum_should_match</code><strong>：指定</strong>最小匹配数量</strong></li></ul></li><li><strong><code>query_string</code><strong>：和match类似，</strong>可不指定字段</strong>即<strong>所有字段中搜索</strong>，范围更广泛</li><li><strong><code>match_phase</code><strong>：会对输入做</strong>分词</strong>，但<strong>结果中也包含所有分词</strong>，且<strong>顺序一样</strong></li><li><strong><code>prefix</code><strong>：</strong>前缀匹配</strong></li><li><strong><code>regexp</code><strong>：通过</strong>正则表达式</strong>来匹配数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;// match会根据该字段的分词器，进行分词查询</span><br><span class="line">      &quot;address&quot;: &quot;广州&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123; // 多字段模糊匹配查询</span><br><span class="line">      &quot;query&quot;: &quot;长沙&quot;, </span><br><span class="line">      &quot;fields&quot;: [&quot;address&quot;, &quot;name&quot;] // address或name字段中匹配到“长沙”</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123; // 未指定字段条件查询query_string, 含AND与OR条件</span><br><span class="line">      &quot;query&quot;: &quot;广州 OR 长沙&quot; // 所有的字段中只要包含“广州”或“长沙”</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123; // 指定字段条件查询query_string</span><br><span class="line">      &quot;query&quot;: &quot;admin AND 长沙&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;name&quot;, &quot;address&quot;] // name或address匹配admin和长沙</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; // ES执行搜索时，默认operator为or</span><br><span class="line">    &quot;match&quot;: &#123; // remark字段包含java或developer词组，则符合搜索条件。</span><br><span class="line">      &quot;remark&quot;: &quot;java developer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;remark&quot;: &#123; // remark字段包含java和developer词组</span><br><span class="line">        &quot;query&quot;: &quot;java developer&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;and&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;remark&quot;: &#123; // 需要remark字段中包含多个搜索词条中的一定比例</span><br><span class="line">        &quot;query&quot;: &quot;java architect assistant&quot;,</span><br><span class="line">        &quot;minimum_should_match&quot;: &quot;50%&quot; // minimum_should_match可使用百分比或固定数字</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>match_phrase</code>短语搜索</strong>，使用短语搜索时和match类似，首先<strong>对搜索条件进行分词</strong>，ES在做分词时除了将数据切分外，还会保留一个<strong>词在整个数据中的下标<code>position</code><strong>。当ES执行match phrase短语搜索时，首先</strong>将搜索条件分词</strong>，然后<strong>在倒排索引中检索数据</strong>，若<strong>搜索条件分词数据</strong>在某个document某个field出现时，则<strong>检查匹配到的单词的<code>position</code>是否连续</strong>，若<strong>不连续则匹配失败</strong>。</p><p>ES对match phrase短语搜索提供了 <strong><code>slop</code>参数</strong>，可实现数据在所有匹配结果中，多个单词<strong>距离越近相关度评分越高排序越靠前</strong>，若<strong>当 <code>slop</code> 移动次数使用完毕还没有匹配成功则无搜索结果</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123; // 短语搜索，搜索条件不分词</span><br><span class="line">      &quot;remark&quot;: &quot;java assistant&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;remark&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;java assistant&quot;,</span><br><span class="line">        &quot;slop&quot;: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前缀搜索"><a href="#前缀搜索" class="headerlink" title="前缀搜索"></a>前缀搜索</h3><p>通常针对 <strong><code>keyword</code></strong> 类型字段即<strong>不分词字段</strong>，**<code>keyword</code><strong>类型字段数据大小写敏感，</strong>前缀搜索效率比较低<strong>，且</strong>不计算相关度分数<strong>，</strong>前缀越短效率越低<strong>。若使用前缀搜索，建议使用长前缀，因为前缀搜索需要</strong>扫描完整索引内容**，所以前缀越长相对效率越高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;f.keyword&quot;: &#123;&quot;value&quot;: &quot;Jav&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通配符搜索"><a href="#通配符搜索" class="headerlink" title="通配符搜索"></a>通配符搜索</h3><p>通配符可在<strong>倒排索引</strong>中使用，也可在 <strong><code>keyword</code><strong>类型字段中使用。</strong><code>?</code>问号匹配一个任意字符</strong>，**<code>*</code>星号匹配<code>0</code>到<code>n</code>个任意字符<strong>。</strong>性能也很低<strong>，也</strong>需要扫描完整索引**。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;f.keyword&quot;: &#123; &quot;value&quot;: &quot;?e*o*&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则搜索"><a href="#正则搜索" class="headerlink" title="正则搜索"></a>正则搜索</h3><p>可在 <strong>倒排索引</strong> 或 <strong><code>keyword</code></strong> 类型字段中使用，<strong>性能很低需要扫描完整索引</strong>。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;regexp&quot;: &#123;&quot;f.keyword&quot;: &quot;[A-z].+&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索推荐"><a href="#搜索推荐" class="headerlink" title="搜索推荐"></a>搜索推荐</h3><p>其原理和 <strong><code>match phrase</code><strong>类似，先使</strong>用<code>match</code>匹配<code>term</code>数据</strong>即示例中的<code>java</code>，然后在指定 <strong><code>slop</code><strong>移动次数范围内</strong>前缀匹配</strong>示例数据<code>sp</code>，**<code>max_expansions</code><strong>是用于</strong>指定<code>prefix</code>最多匹配多少个<code>term</code><strong>，超过该数量就不再匹配了。该语法限制只有</strong>最后一个<code>term</code><strong>会执行</strong>前缀搜索<strong>。执行</strong>性能很差<strong>，</strong>最后一个<code>term</code><strong>需要</strong>扫描所有符合<code>slop</code>要求的倒排索引的<code>term</code>**。若必须使用一定要使用参数 **<code>max_expansions</code>**。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;f&quot;: &#123;&quot;query&quot;: &quot;java sp&quot;,&quot;slop&quot;: 10,&quot;max_expansions&quot;: 10&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h3><p>搜索时可能搜索条件文本输入错误，fuzzy技术就是用于解决错误拼写的，英文中很有效但中文中几乎无效，其中 <strong><code>fuzziness</code></strong> 代表 <strong><code>value</code>值<code>word</code>可修改多少个字母来进行拼写错误纠正</strong>，修改字母数量包含字母变更，增加或减少字母.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;fuzzy&quot;: &#123;</span><br><span class="line">      &quot;f&quot;: &#123;&quot;value&quot;: &quot;word&quot;,&quot;fuzziness&quot;: 2&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h3><ul><li><strong><code>term</code><strong>：</strong>单个条件相等</strong>，查询字段<strong>映射类型</strong>属于为**<code>keyword</code><strong>，</strong>不会被分词**</li><li><strong><code>terms</code><strong>：单个字段属于某个值</strong>数组</strong>内的值</li><li><strong><code>range</code><strong>：字段属于某个</strong>范围</strong>内的值<ul><li>**<code>gte</code>**：大于等于</li><li>**<code>lte</code>**：小于等于</li><li>**<code>gt</code>**：大于</li><li>**<code>lt</code>**：小于</li><li>**<code>now</code>**：当前时间</li></ul></li><li><strong><code>exists</code><strong>：某个字段的值</strong>是否存在</strong></li><li><strong><code>ids</code><strong>：</strong>通过ID批量查询</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123; // term查询不会对字段进行分词查询，会采用精确匹配</span><br><span class="line">      &quot;name&quot;: &quot;admin&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;// 范围查询</span><br><span class="line">      &quot;age&quot;: &#123;&quot;gte&quot;: 25,&quot;lte&quot;: 28&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search // 范围、分页、输出字段、综合查询</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;// 范围查询</span><br><span class="line">      &quot;age&quot;: &#123;&quot;gte&quot;: 25,&quot;lte&quot;: 28&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0, // 分页</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;age&quot;, &quot;book&quot;], // 指定输出字段</span><br><span class="line">  &quot;sort&quot;: &#123;&quot;age&quot;: &quot;desc&quot;&#125;// 排序</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><p><strong>组合条件查询</strong>是将<strong>叶子条件查询</strong>语句进行<strong>组合</strong>而形成的一个完整的查询条件，**<code>must</code><strong>、</strong><code>filter</code><strong>、</strong><code>shoud</code><strong>、</strong><code>must_not</code><strong>等</strong>子条件<strong>是通过 <strong><code>term</code><strong>、</strong><code>terms</code><strong>、</strong><code>range</code><strong>、</strong><code>ids</code><strong>、</strong><code>exists</code><strong>、</strong><code>match</code><strong>等</strong>叶子条件为参数</strong>，当</strong>只有一个搜索条件<strong>时，must等对应的是一个</strong>对象<strong>，当</strong>多个条件<strong>时，对应的是一个</strong>数组**。</p><ul><li>**<code>bool</code>**：各条件之间有 **<code>and</code>**， <strong><code>or</code></strong> 或 <strong><code>not</code></strong> 关系<ul><li><strong><code>must</code><strong>：各个条件</strong>都必须满足</strong>，即各条件是 <strong><code>and</code></strong> 关系</li><li><strong><code>should</code><strong>：各个条件</strong>有一个满足</strong>即可，即各条件是 <strong><code>or</code></strong> 关系</li><li><strong><code>must_not</code><strong>：</strong>不满足所有条件</strong>，即各条件是 <strong><code>not</code></strong> 关系</li><li><strong><code>filter</code><strong>：</strong>不计算相关度评分</strong>，即<strong>不计算<code>_score</code><strong>，</strong>不对结果排序</strong>，效率更高，<strong>查询结果可被缓存</strong></li></ul></li><li><strong><code>constant_score</code><strong>：</strong>不计算相关度评分</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123; // 对数据进行过滤</span><br><span class="line">        &quot;term&quot;: &#123;&quot;age&quot;: 25&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; // 使用should+bool搜索，控制搜索条件的匹配度</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [ // 必须匹配java、developer、assistant三个词条中的至少2个</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;remark&quot;: &quot;java&quot;&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;remark&quot;: &quot;developer&quot;&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;remark&quot;: &quot;assistant&quot;&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;minimum_should_match&quot;: 2// 控制搜索条件的匹配度</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES中执行 <strong><code>match</code>搜索</strong> 时，ES底层通常会<strong>对搜索条件进行底层转换</strong>，来实现最终的搜索结果，若不怕麻烦，<strong>尽量使用转换后的语法执行搜索</strong>，<strong>效率更高</strong>。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search// 转换前</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;remark&quot;:&quot;java developer&quot;&#125;&#125;&#125;</span><br><span class="line">GET /es_db/_search// 转换后</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;bool&quot;:&#123;&quot;should&quot;:[&#123;&quot;term&quot;:&#123;&quot;remark&quot;:&quot;java&quot;&#125;&#125;,&#123;&quot;term&quot;:&#123;&quot;remark&quot;:&#123;&quot;value&quot;:&quot;developer&quot;&#125;&#125;&#125;]&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">GET /es_db/_search// 转换前</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;remark&quot;:&#123;&quot;query&quot;:&quot;java developer&quot;,&quot;operator&quot;:&quot;and&quot;&#125;&#125;&#125;&#125;</span><br><span class="line">GET /es_db/_search// 转换后</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;bool&quot;:&#123;&quot;must&quot;:[&#123;&quot;term&quot;:&#123;&quot;remark&quot;:&quot;java&quot;&#125;&#125;,&#123;&quot;term&quot;:&#123;&quot;remark&quot;:&#123;&quot;value&quot;:&quot;developer&quot;&#125;&#125;&#125;]&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">GET /es_db/_search// 转换前</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;remark&quot;:&#123;&quot;query&quot;:&quot;java architect assistant&quot;,&quot;minimum_should_match&quot;:&quot;68%&quot;&#125;&#125;&#125;&#125;</span><br><span class="line">GET /es_db/_search// 转换后</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;bool&quot;:&#123;&quot;should&quot;:[&#123;&quot;term&quot;:&#123;&quot;remark&quot;:&quot;java&quot;&#125;&#125;,&#123;&quot;term&quot;:&#123;&quot;remark&quot;:&quot;architect&quot;&#125;&#125;,&#123;&quot;term&quot;:&#123;&quot;remark&quot;:&quot;assistant&quot;&#125;&#125;],&quot;minimum_should_match&quot;:2&#125;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="boost权重控制"><a href="#boost权重控制" class="headerlink" title="boost权重控制"></a>boost权重控制</h3><p><strong><code>boost</code>权重控制</strong>一般用于<strong>搜索时相关度排序</strong>使用，将<strong>某字段数据匹配时</strong>相关度<strong>分数增加</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [&#123;&quot;match&quot;: &#123;&quot;remark&quot;: &quot;java&quot;&#125;&#125;],</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;remark&quot;: &#123;&quot;query&quot;: &quot;developer&quot;,&quot;boost&quot;: 3&#125;&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;remark&quot;: &#123;&quot;query&quot;: &quot;architect&quot;,&quot;boost&quot;: 1&#125;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dis-max"><a href="#dis-max" class="headerlink" title="dis_max"></a>dis_max</h3><p><strong><code>dis_max</code></strong> 语法是直接 <strong>获取搜索多条件</strong> 中 <strong>单条件<code>query</code>相关度分数最高</strong> 的数据，以该数据做 <strong>相关度排序</strong>。<strong>基于<code>dis_max</code></strong> 实现 <strong><code>best fields</code>策略</strong> 进行 <strong>多字段搜索</strong>，**<code>best fields</code>策略<strong>是搜索document中</strong>某个<code>field</code><strong>，</strong>尽可能多的匹配搜索条件**。与之相反的是 <strong><code>most fields</code>策略</strong> 即 <strong>尽可能多的字段匹配到搜索条件</strong> 。</p><p><strong><code>best fields</code>策略</strong>优点<strong>是精确匹配</strong>的数据可尽可能排列在<strong>最前端</strong>，且可通过**<code>minimum_should_match</code><strong>去除</strong>长尾数据<strong>，避免长尾数据字段对排序结果的影响。</strong>缺点<strong>相对</strong>排序不均匀**。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; </span><br><span class="line">    &quot;dis_max&quot;: &#123; // 找name字段中rod匹配相关度分数或remark字段中java developer匹配相关度分数,哪个高就使用哪个相关度分数进行结果排序</span><br><span class="line">      &quot;queries&quot;: [</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;name&quot;: &quot;rod&quot;&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;remark&quot;: &quot;java developer&quot;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>dis_max</code></strong> 是将 <strong>多个</strong> 搜索query条件中 <strong>相关度分数最高</strong> 的用于结果排序，<strong>忽略其他<code>query</code>分数</strong>，在某些情况下 <strong>需要其他query条件中相关度介入最终结果排序</strong>，此时可 <strong>使用<code>tie_breaker</code>参数来优化<code>dis_max</code>搜索</strong>。 <strong><code>tie_breaker</code></strong> 参数表示 <strong>将其他<code>query</code>搜索条件相关度分数乘以参数值再参与结果排序</strong>。若不定义 <strong><code>tie_breaker</code></strong> 参数相当于 **参数值为<code>0</code>**，故其他query条件的相关度分数被忽略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; </span><br><span class="line">    &quot;dis_max&quot;: &#123; // 找name字段中rod匹配相关度分数或remark字段中java developer匹配相关度分数,哪个高就使用哪个相关度分数进行结果排序</span><br><span class="line">      &quot;queries&quot;: [</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;name&quot;: &quot;rod&quot;&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;remark&quot;: &quot;java developer&quot;&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;tie_breaker&quot;: 0.5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**使用<code>multi_match</code>简化<code>dis_max+tie_breaker</code>**，ES中相同结果搜索也可使用不同语法语句来实现。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;dis_max&quot;: &#123;</span><br><span class="line">      &quot;queries&quot;: [</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;name&quot;: &quot;rod&quot;&#125;&#125;,</span><br><span class="line">        &#123;&quot;match&quot;: &#123;&quot;remark&quot;: &#123;&quot;query&quot;: &quot;java assistant&quot;,&quot;boost&quot;: 2&#125;&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;tie_breaker&quot;: 0.5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;rod java developer&quot;,</span><br><span class="line">      &quot;fields&quot;: [</span><br><span class="line">        &quot;name&quot;,</span><br><span class="line">        &quot;remark^2&quot;// ^n代表权重，相当于&quot;boost&quot;:n</span><br><span class="line">      ],</span><br><span class="line">      &quot;type&quot;: &quot;best_fields&quot;, // 其中type常用的有best_fields和most_fields</span><br><span class="line">      &quot;tie_breaker&quot;: 0.5,</span><br><span class="line">      &quot;minimum_should_match&quot;: &quot;50%&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>cross fields</code></strong> 是一个 <strong>唯一标识</strong>，且分布在 <strong>多个<code>fields</code></strong> 中，<strong>使用该唯一标识搜索数据即<code>cross fields</code>搜索</strong>。如人名可分为姓和名，地址可分为省、市、区县、街道等。使用人名或地址来搜索document，就称为cross fields搜索。  </p><p>实现这种搜索，一般都是使用 <strong><code>most fields</code>搜索策略</strong>，因为这就是 <strong>多个<code>field</code></strong> 问题。 <strong><code>Cross fields</code></strong> 搜索策略是 <strong>从多个字段中搜索条件数据</strong>，<strong>默认和<code>most fields</code>搜索逻辑一致</strong> 但 <strong>计算相关度分数和<code>best fields</code>策略一致</strong>。一般若使用cross fields搜索策略，都会携带 <strong><code>operator</code></strong> 额外参数，用来标记搜索条件如何在多个字段中匹配。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123; // 搜索条件中java必须在name或remark字段中匹配，developer也必须在name或remark字段中匹配</span><br><span class="line">      &quot;query&quot;: &quot;java developer&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;name&quot;, &quot;remark&quot;],</span><br><span class="line">      &quot;type&quot;: &quot;cross_fields&quot;,</span><br><span class="line">      &quot;operator&quot;: &quot;and&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>most fields</code>策略</strong> 是尽可能匹配更多字段，会导致 <strong>精确搜索结果排序问题</strong> ，又因为cross fields搜索，不能使用 <strong><code>minimum_should_match</code></strong> 来去除长尾数据。故在使用 <strong><code>most fields</code></strong> 和 <strong><code>cross fields</code></strong> 策略搜索数据时，都有不同缺陷，商业项目开发中都 <strong>推荐使用<code>best fields</code>策略</strong> 实现搜索。</p><p>可通过 <strong><code>copy_to</code></strong> 解决 <strong><code>cross fields</code>搜索问题</strong>， <strong><code>copy_to</code></strong> 就是将 <strong>多个字段复制到一个字段</strong> 中实现一个 <strong>多字段组合</strong>，在商业项目中，也用于 <strong>解决搜索条件默认字段问题</strong>。若需要使用copy_to语法，则需要在定义 <strong><code>index</code></strong> 时手工指定 <strong><code>mapping</code>映射策略</strong>。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /es_db/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;provice&quot;: &#123;&quot;type&quot;: &quot;text&quot;,&quot;analyzer&quot;: &quot;standard&quot;,&quot;copy_to&quot;: &quot;address&quot;&#125;,</span><br><span class="line">    &quot;city&quot;: &#123;&quot;type&quot;: &quot;text&quot;,&quot;copy_to&quot;: &quot;address&quot;&#125;,</span><br><span class="line">    &quot;street&quot;: &#123;&quot;type&quot;: &quot;text&quot;,&quot;analyzer&quot;: &quot;standard&quot;,&quot;copy_to&quot;: &quot;address&quot;&#125;,</span><br><span class="line">    &quot;address&quot;: &#123;&quot;type&quot;: &quot;text&quot;,&quot;analyzer&quot;: &quot;standard&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在mapping定义中新增provice、city、street、address等字段，其中provice、city、street三个字段值会自动复制到address字段中，实现一个字段组合。在搜索地址时可在address字段中做条件匹配，从而<strong>避免<code>most fields</code>策略导致的问题</strong>。在维护数据时不需对address字段特殊维护，ES会<strong>自动维护组合字段</strong>。在存储时<strong>物理上不一定存在但逻辑上存在</strong>，因为address由3个物理存在属性province、city、street组成。</p><p>使用 <strong><code>match</code></strong> 和 <strong><code>proximity search</code></strong> 实现 <strong>召回率</strong> 和 <strong>精准度平衡</strong> ，若搜索时只使用<code>match phrase</code>语法，会导致 <strong>召回率低下</strong>，若只使用<code>match</code>语法，会导致 <strong>精准度低下</strong>，因为搜索结果排序是根据相关度分数算法计算得到。若需要在结果中 <strong>兼顾召回率</strong> 和 <strong>精准度</strong>，就需要将 <strong><code>match</code></strong> 和 <strong><code>proximity search</code></strong> 混合使用。</p><ul><li><strong>召回率</strong>：<strong>搜索结果比率</strong>，如索引A中有100个document，搜索时返回多少个document</li><li><strong>精准度</strong>：<strong>搜索结果准确率</strong>，如搜索条件为<code>hello java</code>，搜索结果中尽可能让短语匹配和<code>hello java</code>离的近的结果排序靠前<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /test_a/_doc/3</span><br><span class="line">&#123;&quot;f&quot;:&quot;hello, java is very good, spark is also very good&quot;&#125;</span><br><span class="line">POST /test_a/_doc/4</span><br><span class="line">&#123;&quot;f&quot;:&quot;java and spark, development language &quot;&#125;</span><br><span class="line">POST /test_a/_doc/5</span><br><span class="line">&#123;&quot;f&quot;:&quot;Java Spark is a fast and general-purpose cluster computing system. It provides high-level APIs in Java, Scala, Python and R, and an optimized engine that supports general execution graphs.&quot;&#125;</span><br><span class="line">POST /test_a/_doc/6</span><br><span class="line">&#123;&quot;f&quot;:&quot;java spark and, development language &quot;&#125;</span><br><span class="line"></span><br><span class="line">GET /test_a/_search</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;f&quot;:&quot;java spark&quot;&#125;&#125;&#125;</span><br><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [&#123;&quot;match&quot;: &#123;&quot;f&quot;: &quot;java spark&quot;&#125;&#125;],</span><br><span class="line">      &quot;should&quot;: [&#123;&quot;match_phrase&quot;: &#123;&quot;f&quot;: &#123;&quot;query&quot;: &quot;java spark&quot;,&quot;slop&quot;: 50&#125;&#125;&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><ul><li><strong>父子</strong>文档查询：**<code>parent/child</code>**</li><li><strong>嵌套</strong>文档查询：**<code>nested</code>**</li></ul><h2 id="ES架构原理"><a href="#ES架构原理" class="headerlink" title="ES架构原理"></a>ES架构原理</h2><p>在ES中主要分成 <strong><code>Master</code></strong> 和 <strong><code>DataNode</code></strong> 两类节点，ES启动时会选举出一个Master节点，当某个节点启动后，使用 <strong><code>Zen Discovery</code>机制</strong> 找到集群中的其他节点并 <strong>建立连接</strong>，并 <strong>从候选主节点中选举出一个主节点</strong>。一个ES集群中只有一个Master节点，但会有 <strong><code>N</code>个<code>DataNode</code></strong> 节点，在生产环境中内存可相对小一点但机器要稳定。</p><ul><li><strong><code>Master</code><strong>：</strong>管理索引</strong>即创建、删除索引，<strong>分配分片</strong>，<strong>维护元数据</strong>，<strong>管理集群节点状态</strong>，<strong>不负责数据写入和查询</strong>，比较轻量级</li><li><strong><code>DataNode</code><strong>：</strong>数据写入</strong>，<strong>数据检索</strong>，大部分ES压力都在DataNode节点上</li></ul><h3 id="分片Shard"><a href="#分片Shard" class="headerlink" title="分片Shard"></a>分片Shard</h3><p>ES是一个<strong>分布式搜索引擎</strong>，索引数据也分成若干部分，分布在不同服务器节点中，分布在不同服务器节点中的索引数据，就是Shard分片。Elasticsearch会<strong>自动管理分片</strong>，若发现分片<strong>分布不均衡</strong>，会<strong>自动迁移</strong>一个索引index由多个shard分片组成，<strong>分片是分布在不同的服务器上</strong>。</p><h3 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h3><p>为了<strong>对ES分片进行容错</strong>，假设某个节点不可用，会导致整个索引库都将不可用。故需要对分片进行副本容错，<strong>每个分片都会有对应的副本</strong>。<strong>默认创建索引为<code>1</code>个分片</strong>、每个分片有 <strong><code>1</code>个主分片</strong> 和 <strong><code>1</code>个副本分片</strong>。</p><p>每个分片都会有<strong>一个<code>Primary Shard</code>主分片</strong>，也会有<strong>若干个<code>Replica Shard</code>副本分片</strong>，**<code>Primary Shard</code>和<code>Replica Shard</code>不在同一个节点上**。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /job_idx_shard_temp // 创建指定分片数量、副本数量的索引</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;id&quot;: &#123;&quot;type&quot;: &quot;long&quot;,&quot;store&quot;: true&#125;,</span><br><span class="line">            &quot;area&quot;: &#123;&quot;type&quot;: &quot;keyword&quot;,&quot;store&quot;: true&#125;,</span><br><span class="line">            &quot;edu&quot;: &#123;&quot;type&quot;: &quot;keyword&quot;,&quot;store&quot;: true&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;number_of_shards&quot;: 3,// 指定分片数量</span><br><span class="line">        &quot;number_of_replicas&quot;: 2// 指定副本数量</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /_cat/indices?v// 查看分片、主分片、副本分片</span><br></pre></td></tr></table></figure><h2 id="文档写入原理"><a href="#文档写入原理" class="headerlink" title="文档写入原理"></a>文档写入原理</h2><p><img src="/../../../../assets/png/ElasticSearch/%E6%96%87%E6%A1%A3%E5%86%99%E5%85%A5%E5%8E%9F%E7%90%86.png" alt="文档写入原理"></p><p>选择 <strong>任意一个<code>DataNode</code>发送请求</strong> 如node2，此时node2就成为一个 <strong><code>coordinating node</code>协调节点</strong>，通过协调节点 **计算得到文档要写入的分片<code>shard = hash(routing) % number_of_primary_shards</code><strong>，其中 <strong><code>routing</code></strong> 是一个 <strong>可变值</strong>，</strong>默认为文档<code>_id</code>**，然后 <strong>协调节点会进行路由</strong>，将请求 <strong>转发</strong>给对应 <strong><code>primary shard</code>主分片</strong>所在的 **<code>DataNode</code>**，假设primary shard主分片在node1、replica shard副分片在node2，node1节点上的Primary Shard处理请求，写入数据到索引库中，并将数据同步到Replica shard副分片，Primary Shard和Replica Shard都保存好了文档则返回Client。  </p><h2 id="检索原理"><a href="#检索原理" class="headerlink" title="检索原理"></a>检索原理</h2><p><img src="/../../../../assets/png/ElasticSearch/%E6%A3%80%E7%B4%A2%E5%8E%9F%E7%90%86.png" alt="检索原理"></p><p>Client发起查询请求某个 <strong><code>DataNode</code></strong> 接收到请求后，该 <strong><code>DataNode</code></strong> 就成为 <strong><code>Coordinating Node</code>协调节点</strong>，<strong>协调节点将查询请求广播到每一个数据节点</strong>，这些 <strong>数据节点</strong> 的 <strong>分片</strong> 会处理该查询请求，<strong>每个分片进行数据查询</strong>，将符合条件的数据放在一个 <strong>优先队列</strong> 中，并将这些数据的 <strong>文档<code>ID</code><strong>、 <strong>节点信息</strong>、 <strong>分片信息</strong> 返回给 <strong>协调节点</strong> ，</strong>协调节点将所有结果进行汇总并全局排序</strong>，协调节点向包含这些 <strong>文档<code>ID</code></strong> 的 <strong>分片</strong> 发送 <strong><code>get</code>请求</strong>，对应的分片将文档数据返回给协调节点，最后协调节点将数据返回给客户端。</p><h2 id="准实时索引"><a href="#准实时索引" class="headerlink" title="准实时索引"></a>准实时索引</h2><p><img src="/../../../../assets/png/ElasticSearch/%E5%87%86%E5%AE%9E%E6%97%B6%E7%B4%A2%E5%BC%95.png" alt="准实时索引">  </p><p>当数据写入到ES分片时会 <strong>首先写入到内存中</strong>，然后通过 <strong>内存<code>buffer</code></strong> 生成一个 <strong><code>Segment</code><strong>，并刷到 <strong>文件系统缓存</strong> 中而 <strong>不是直接刷到磁盘</strong>，数据可被检索，ES中 <strong>默认<code>1</code>秒<code>refresh</code>一次</strong>。数据在 <strong>写入内存的同时</strong>，也会 <strong>记录<code>Translog</code>日志</strong>，若 <strong>在<code>refresh</code>期间出现异常</strong>，会 <strong>根据<code>Translog</code></strong> 来进行 <strong>数据恢复</strong>，等到 <strong>文件系统缓存</strong> 中的 <strong><code>Segment</code></strong> 数据 <strong>都刷到磁盘中</strong>，则 <strong>清空<code>Translog</code>文件</strong>，ES <strong>默认每隔<code>30</code>分钟</strong> 会将 <strong>文件系统缓存</strong> 的数据 <strong>刷入到磁盘</strong>。</strong><code>Segment</code>太多</strong> 时ES <strong>定期</strong> 会将多个 <strong><code>Segment</code>合并</strong> 成为大的Segment，<strong>减少索引查询时<code>IO</code>开销</strong>，此阶段ES会真正的 <strong>物理删除</strong> 之前 <strong>执行过<code>delete</code>的数据</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Elasticsearch是什么？&quot;&gt;&lt;a href=&quot;#Elasticsearch是什么？&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch是什么？&quot;&gt;&lt;/a&gt;Elasticsearch是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;str</summary>
      
    
    
    
    <category term="工具和中间件" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="搜索引擎技术" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/"/>
    
    <category term="ElasticSearch" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud介绍</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识介绍："><a href="#基础知识介绍：" class="headerlink" title="基础知识介绍："></a>基础知识介绍：</h1><h2 id="单体架构系统："><a href="#单体架构系统：" class="headerlink" title="单体架构系统："></a>单体架构系统：</h2><p>单体架构就是所有功能，都放在一个应用里。</p><h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><p>便于开发，测试，部署也很方便，直接打成一个 jar 或者 war, 就什么都好了。</p><h3 id="弊端："><a href="#弊端：" class="headerlink" title="弊端："></a>弊端：</h3><p>要体现在高访问，高并发的上限是固定的。 比如一个单体架构，能够承受 1000次访问&#x2F;秒。 但是访问量达到 2000次&#x2F;秒的时候，就会非常卡顿，严重影响业务，并且仅仅依靠单体架构本身，很难突破这个瓶颈了。<br><img src="/../../../assets/png/SpringCloud/%E5%8D%95%E4%BD%93%E7%BB%93%E6%9E%84.png" alt="单体结构" title="单体结构"></p><h2 id="集群和分布式："><a href="#集群和分布式：" class="headerlink" title="集群和分布式："></a>集群和分布式：</h2><p>既然单体架构会有性能上的瓶颈，那么总要解决呀。 解决办法通常就是采用集群和分布式来做。</p><h3 id="集群："><a href="#集群：" class="headerlink" title="集群："></a>集群：</h3><p>指一组相互独立的计算机，通过高速的网络组成一个计算机系统。服务器集群就是指将很多服务器集中起来一起进行同一种服务，在客户端看来就像是只有一个服务器。</p><h4 id="集群的特点和优势"><a href="#集群的特点和优势" class="headerlink" title="集群的特点和优势:"></a>集群的特点和优势:</h4><ul><li>高性能  </li><li>性价比   </li><li>可伸缩性<h4 id="集群的分类"><a href="#集群的分类" class="headerlink" title="集群的分类"></a>集群的分类</h4></li><li>负载均衡集群（Load balancing clusters）简称LBC</li><li>高可用性集群（High-availability clusters）简称HAC</li><li>高性能计算集群（High-perfomance clusters）简称HPC</li></ul><p><img src="/../../../assets/png/SpringCloud/%E9%9B%86%E7%BE%A4.png" alt="集群" title="集群"></p><h3 id="分布式："><a href="#分布式：" class="headerlink" title="分布式："></a>分布式：</h3><p>指将不同的业务分布在不同的地方，而集群指的是将几台服务器集中在一起，实现同一业务。分布式中的每一个节点，都可以做集群，而集群并不一定就是分布式的。</p><h4 id="分布式一致性："><a href="#分布式一致性：" class="headerlink" title="分布式一致性："></a>分布式一致性：</h4><p>分布式系统中，一个问题是负载均衡，另外一个问题就是数据的一致性。</p><p>在分布式集群中，很难保障数据的一致性。在以往的单节点服务中，通常使用锁来实现，当发生并发冲突时 通过对锁的持有获得对象的操作权，从而保证数据在同一时刻只允许被一个请求操作。但是在集群中，若同样采用锁的机制，那么需要一台节点用来管理分配锁，当其他节点进行请求前，首先去获取锁从而获得执行权。但是这样会产生单节点问题，即若管理锁的节点down掉，那么整个集群将无法工作。同时，由于锁的机制会使整个集群变成串行化单节点的形式，失去了集群的意义。</p><p><img src="/../../../assets/png/SpringCloud/%E5%88%86%E5%B8%83%E5%BC%8F.png" alt="分布式" title="分布式"></p><h3 id="分布式和集群的关系："><a href="#分布式和集群的关系：" class="headerlink" title="分布式和集群的关系："></a>分布式和集群的关系：</h3><ul><li>根据分布式的介绍看出，其主要的功能是用了将我们的系统模块化，将系统进行解耦的，方便我们的维护和开发的，但是其并不能解决我们的并发问题，也无法保证我们的系统在服务器宕机后的正常运转。</li><li>集群就恰好弥补了分布式的缺陷，集群就是多个服务器处理相同的业务，这在一方面可以解决或者说改善我们系统的并发问题，一方面可以解决我们服务器如果出现一定数量的宕机后，系统仍然可以正常运转。</li></ul><h1 id="SpringCloud介绍："><a href="#SpringCloud介绍：" class="headerlink" title="SpringCloud介绍："></a>SpringCloud介绍：</h1><p>SpringCloud 就是一套工具。</p><p>Spring Cloud 并不是一个项目，而是一组项目的集合。包含了很多的子项目，每一个子项目都是一种微服务开发过程中遇到的问题的一种解决方案。它利用 Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h2 id="子项目介绍"><a href="#子项目介绍" class="headerlink" title="子项目介绍:"></a>子项目介绍:</h2><ul><li>Spring Cloud Config：集中配置管理工具，分布式系统中统一的外部配置管理，可以支持客户端配置的刷新及加密、解密操作, 可以让你把配置放到远程服务器，目前支持本地存储、Git 以及 Subversion。</li><li>Spring Cloud Netflix：针对多种 Netflix 组件提供的开发工具包，其中包括 Eureka、Hystrix、Ribbon、Feign、Zuul、Archaius 等组件, 如下:</li><li><ul><li>Eureka：服务治理组件，包括服务端的注册中心和客户端的服务发现机制；</li></ul></li><li><ul><li>Hystrix：服务容错组件，实现了断路器模式，为依赖服务的出错和延迟提供了容错能力；</li></ul></li><li><ul><li>Ribbon：负载均衡的服务调用组件，具有多种负载均衡调用策略；</li></ul></li><li><ul><li>Feign：基于Ribbon和Hystrix的声明式服务调用组件；</li></ul></li><li><ul><li>Zuul：API网关组件，对请求提供路由及过滤功能；</li></ul></li><li><ul><li>Archaius：基于java的配置管理类库，主要用于多配置存储的动态获取。</li></ul></li><li>Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与 Spring Cloud Config 联合实现热部署。</li><li>Spring Cloud Consul：封装了 Consul 操作，consul 是一个服务发现与配置工具，与 Docker 容器可以无缝集成。</li><li>Spring Cloud Security ：安全工具包，对Zuul代理中的负载均衡OAuth2客户端及登录认证进行支持。</li><li>Spring Cloud Sleuth：日志收集工具包，封装了 Dapper，Zipkin 和 HTrace 操作. Spring Cloud 应用的分布式跟踪实现。</li><li>Spring Cloud Stream：数据流操作开发包，封装了与 Redis，Rabbit、Kafka 等发送接收消息，实现的消息微服务。</li><li>Spring Cloud Task：用于快速构建短暂、有限数据处理任务的微服务框架，用于向应用中添加功能性和非功能性的特性。</li><li>Spring Cloud Zookeeper：基于 ZooKeeper 的服务发现与配置管理组件。</li><li>Spring Cloud Gateway：API网关组件，对请求提供路由及过滤功能, Spring Cloud 网关相关的整合实现。</li><li>Spring Cloud Aws：用于简化整合 Amazon Web Service 的组件。</li><li>Spring Cloud Cli：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</li><li>Spring Cloud Commons：服务发现、负载均衡、熔断机制这种模式为 Spring Cloud 客户端提供了一个通用的抽象层。</li><li>Spring Cloud Contract：Spring Cloud Contract是一个总体项目，其中包含帮助用户成功实施消费者驱动合同方法的解决方案(契约测试)。</li><li>Spring Cloud Cloudfoundry：通过 Oauth2 协议绑定服务到 CloudFoundry，CloudFoundry 是 VMware 推出的开源 PaaS 云平台。</li><li>Spring Cloud OpenFeign：基于Ribbon和Hystrix的声明式服务调用组件，可以动态创建基于Spring MVC注解的接口实现用于服务调用，在Spring Cloud 2.0中已经取代Feign成为了一等公民。</li></ul><p><img src="/../../../assets/png/SpringCloud/SpringCloud.png" alt="SpringCloud" title="SpringCloud"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识介绍：&quot;&gt;&lt;a href=&quot;#基础知识介绍：&quot; class=&quot;headerlink&quot; title=&quot;基础知识介绍：&quot;&gt;&lt;/a&gt;基础知识介绍：&lt;/h1&gt;&lt;h2 id=&quot;单体架构系统：&quot;&gt;&lt;a href=&quot;#单体架构系统：&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列10-断路器Hystrix</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9710-%E6%96%AD%E8%B7%AF%E5%99%A8Hystrix/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9710-%E6%96%AD%E8%B7%AF%E5%99%A8Hystrix/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h1><p>视图微服务是依赖于数据微服务的。那么当数据微服务不可用的时候，会怎么样呢？我们主动把 ProductDataServiceApplication 关闭，然后再访问：<a href="http://localhost:8012/products">http://localhost:8012/products</a> 就会抛出异常。客户也看不懂这个是什么。为了解决这个问题，我们就会引入断路器的概念。</p><h1 id="断路器"><a href="#断路器" class="headerlink" title="断路器:"></a>断路器:</h1><p>断路器: 就是当被访问的微服务无法使用的时候，当前服务能够感知这个现象，并且提供一个备用的方案出来。</p><h1 id="改造"><a href="#改造" class="headerlink" title="改造:"></a>改造:</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml:"></a>pom.xml:</h2><p>增加 jar spring-cloud-starter-netflix-hystrix 以支持断路器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--增加 jar spring-cloud-starter-netflix-hystrix 以支持断路器--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="ProductClientFeign-java"><a href="#ProductClientFeign-java" class="headerlink" title="ProductClientFeign.java"></a>ProductClientFeign.java</h2><p>注解由原来的 <code>@FeignClient(value = &quot;PRODUCT-DATA-SERVICE&quot;)</code><br>修改为 <code>@FeignClient(value = &quot;PRODUCT-DATA-SERVICE&quot;,fallback = ProductClientFeignHystrix.class)</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.client;</span><br><span class="line"></span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;PRODUCT-DATA-SERVICE&quot;,fallback = ProductClientFeignHystrix.class)</span><br><span class="line">public interface ProductClientFeign &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/products&quot;)</span><br><span class="line">    public List&lt;Product&gt; listProdcuts();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ProductClientFeignHystrix-java"><a href="#ProductClientFeignHystrix-java" class="headerlink" title="ProductClientFeignHystrix.java"></a>ProductClientFeignHystrix.java</h2><p>ProductClientFeignHystrix 实现了 ProductClientFeign 接口，并提供了 listProdcuts() 方法。这个方法就会固定返回包含一条信息的集合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.client;/*</span><br><span class="line"> * Create By Tao on 2022/4/24.</span><br><span class="line"> *</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class ProductClientFeignHystrix implements ProductClientFeign&#123;</span><br><span class="line"></span><br><span class="line">    public List&lt;Product&gt; listProdcuts()&#123;</span><br><span class="line">        List&lt;Product&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">        result.add(new Product(0,&quot;产品数据微服务现在不可用&quot;,0));</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>在配置文件里开启断路器:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feign.hystrix.enabled: true</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动:"></a>启动:</h1><p>挨个启动： EurekaServerApplication, ConfigServerApplication, ProductViewServiceFeignApplication。<code>注意: 数据服务是没有启动的。</code><br>然后访问地址：<code>http://127.0.0.1:8012/products</code><br>会发现，依然可以打开，并且得到提示信息： 产品数据微服务不可用。<br><img src="/../../../assets/png/SpringCloud/%E6%96%AD%E8%B7%AF%E5%99%A8-Hystrix.png" alt="断路器-Hystrix"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题:&quot;&gt;&lt;/a&gt;问题:&lt;/h1&gt;&lt;p&gt;视图微服务是依赖于数据微服务的。那么当数据微服务不可用的时候，会怎么样呢？我们主动把 ProductDataServiceApplica</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列13-网关Zuul</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9713-%E7%BD%91%E5%85%B3Zuul/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9713-%E7%BD%91%E5%85%B3Zuul/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题：为何要用网关"><a href="#问题：为何要用网关" class="headerlink" title="问题：为何要用网关?"></a>问题：为何要用网关?</h1><ul><li>我们现在有两种微服务，分别是数据微服务和视图微服务。它们有可能放在不同的 ip 地址上，有可能是不同的端口。</li><li>为了访问他们，就需要记录这些地址和端口。 而地址和端口都可能会变化，这就增加了访问者的负担。这个时候，我们就可以用网关来解决这个问题。</li><li>如图所示，我们只需要记住网关的地址和端口号就行了：</li><li><ul><li>如果要访问数据服务，访问地址 <a href="http://ip:port/api-data/products">http://ip:port/api-data/products</a> 即可。</li></ul></li><li><ul><li>如果要访问视图服务，访问地址 <a href="http://ip:port/api-view/products">http://ip:port/api-view/products</a> 即可<br><img src="/../../../assets/png/SpringCloud/%E7%BD%91%E5%85%B3-%E6%B5%81%E7%A8%8B.png" alt="网关-流程"></li></ul></li></ul><h1 id="创建子项目：-zuul"><a href="#创建子项目：-zuul" class="headerlink" title="创建子项目： zuul"></a>创建子项目： zuul</h1><h2 id="pom-xml："><a href="#pom-xml：" class="headerlink" title="pom.xml："></a>pom.xml：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;productServiceZuul&lt;/artifactId&gt;</span><br><span class="line">    &lt;name&gt;productServiceZuul&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="ProductServiceZuulApplication-java"><a href="#ProductServiceZuulApplication-java" class="headerlink" title="ProductServiceZuulApplication.java:"></a>ProductServiceZuulApplication.java:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import cn.hutool.core.util.NetUtil;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ProductServiceZuulApplication</span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        int port = 8040;</span><br><span class="line">        if(!NetUtil.isUsableLocalPort(port)) &#123;</span><br><span class="line">            System.err.printf(&quot;端口%d被占用了，无法启动%n&quot;, port );</span><br><span class="line">            System.exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        new SpringApplicationBuilder(ProductServiceZuulApplication.class).properties(&quot;server.port=&quot; + port).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml:"></a>application.yml:</h2><p>配置文件，进行了路由映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    api-a:</span><br><span class="line">      path: /api-data/**</span><br><span class="line">      serviceId: PRODUCT-DATA-SERVICE</span><br><span class="line">    api-b:</span><br><span class="line">      path: /api-view/**</span><br><span class="line">      serviceId: PRODUCT-VIEW-SERVICE-FEIGN</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: product-service-zuul</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    api-a:</span><br><span class="line">      path: /api-data/**</span><br><span class="line">      serviceId: PRODUCT-DATA-SERVICE</span><br><span class="line">    api-b:</span><br><span class="line">      path: /api-view/**</span><br><span class="line">      serviceId: PRODUCT-VIEW-SERVICE-FEIGN</span><br></pre></td></tr></table></figure><h1 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h1><ul><li>首先挨个运行 EurekaServerApplication, ConfigServerApplication, ProductDataServiceApplication， ProductViewServiceFeignApplication。</li><li>然后启动 ProductServiceZuulApplication</li><li>接着访问地址:</li><li><ul><li><a href="http://localhost:8040/api-data/products">http://localhost:8040/api-data/products</a></li></ul></li><li><ul><li><a href="http://localhost:8040/api-view/products">http://localhost:8040/api-view/products</a></li></ul></li></ul><p>这样就可以访问数据微服务和视微服务集群了，并且无需去记住那么多ip地址和端口号了。<br><img src="/../../../assets/png/SpringCloud/%E7%BD%91%E5%85%B3-%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="网关-微服务"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题：为何要用网关&quot;&gt;&lt;a href=&quot;#问题：为何要用网关&quot; class=&quot;headerlink&quot; title=&quot;问题：为何要用网关?&quot;&gt;&lt;/a&gt;问题：为何要用网关?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我们现在有两种微服务，分别是数据微服务和视图微服务。它们有可能放在不</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列11-断路器监控</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9711-%E6%96%AD%E8%B7%AF%E5%99%A8%E7%9B%91%E6%8E%A7/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9711-%E6%96%AD%E8%B7%AF%E5%99%A8%E7%9B%91%E6%8E%A7/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h1><p>断路器，是当数据服务不可用的时候， 断路器就会发挥作用。<br>那么数据服务什么时候可用，什么时候不可用，如何监控这个事情呢？ 我们就要用到 断路器监控 来可视化掌控这个情况了。</p><h1 id="创建子项目：hystrix-dashboard"><a href="#创建子项目：hystrix-dashboard" class="headerlink" title="创建子项目：hystrix-dashboard"></a>创建子项目：hystrix-dashboard</h1><h2 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">    &lt;name&gt;hystrix-dashboard&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="ProductServiceHystrixDashboardApplication-java"><a href="#ProductServiceHystrixDashboardApplication-java" class="headerlink" title="ProductServiceHystrixDashboardApplication.java"></a>ProductServiceHystrixDashboardApplication.java</h2><p><code>断路器监控启动类，主要就是@EnableHystrixDashboard</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import cn.hutool.core.util.NetUtil;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableHystrixDashboard</span><br><span class="line">public class ProductServiceHystrixDashboardApplication</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int port = 8020;</span><br><span class="line">        if(!NetUtil.isUsableLocalPort(port)) &#123;</span><br><span class="line">            System.err.printf(&quot;端口%d被占用了，无法启动%n&quot;, port );</span><br><span class="line">            System.exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        new SpringApplicationBuilder(ProductServiceHystrixDashboardApplication.class).properties(&quot;server.port=&quot; + port).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml:"></a>application.yml:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: hystrix-dashboard</span><br></pre></td></tr></table></figure><h2 id="ProductViewServiceFeignApplication-java"><a href="#ProductViewServiceFeignApplication-java" class="headerlink" title="ProductViewServiceFeignApplication.java"></a>ProductViewServiceFeignApplication.java</h2><ul><li>修改视图微服务项目，以使得它可以把信息共享给监控中心。</li><li>修改ProductViewServiceFeignApplication， 增加 @EnableCircuitBreaker</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import brave.sampler.Sampler;</span><br><span class="line">import cn.hutool.core.util.NetUtil;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">@EnableCircuitBreaker   //把信息共享给监控中心</span><br><span class="line">public class ProductViewServiceFeignApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 判断 rabiitMQ 是否启动</span><br><span class="line">        int rabbitMQPort = 5672;</span><br><span class="line">        if(NetUtil.isUsableLocalPort(rabbitMQPort)) &#123;</span><br><span class="line">            System.err.printf(&quot;未在端口%d 发现 rabbitMQ服务，请检查rabbitMQ 是否启动&quot;, rabbitMQPort );</span><br><span class="line">            System.exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        // 推荐  8012 、 8013  或者  8014</span><br><span class="line">        SpringApplication.run(ProductViewServiceFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Sampler defaultSampler() &#123;</span><br><span class="line">        return Sampler.ALWAYS_SAMPLE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AccessViewService-java"><a href="#AccessViewService-java" class="headerlink" title="AccessViewService.java:"></a>AccessViewService.java:</h2><p>准备一个不停访问服务的类： AccessViewService。 这样可以不断地访问服务，才便于在监控那里观察现象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.util;</span><br><span class="line"></span><br><span class="line">import cn.hutool.core.thread.ThreadUtil;</span><br><span class="line">import cn.hutool.http.HttpUtil;</span><br><span class="line"></span><br><span class="line">public class AccessViewService &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        while(true) &#123;</span><br><span class="line">            ThreadUtil.sleep(1000);</span><br><span class="line">            access(8012);</span><br><span class="line">            access(8013);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void access(int port) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String html= HttpUtil.get(String.format(&quot;http://127.0.0.1:%d/products&quot;,port));</span><br><span class="line">            System.out.printf(&quot;%d 地址的视图服务访问成功，返回大小是 %d%n&quot; ,port, html.length());</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Exception e) &#123;</span><br><span class="line">            System.err.printf(&quot;%d 地址的视图服务无法访问%n&quot;,port);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h1><ul><li>首先挨个运行 EurekaServerApplication, ConfigServerApplication, ProductDataServiceApplication， ProductViewServiceFeignApplication，ProductServiceHystrixDashboardApplication;</li><li>运行视图微服务里的 AccessViewService 来周期性地访问 <code>http://127.0.0.1:8012/products</code> 。 因为只有访问了，监控里才能看到数据;</li><li>打开监控地址 <code>http://localhost:8020/hystrix</code>;</li><li>如图所示，在最上面输入<code>http://localhost:8012/actuator/hystrix.stream</code> :<br><img src="/../../../assets/png/SpringCloud/%E6%96%AD%E8%B7%AF%E5%99%A8%E7%9B%91%E6%8E%A7-%E4%B8%BB%E9%A1%B5.png" alt="断路器监控-主页"></li><li>点击 Monitor Stream 就可以看到监控信息了。<br><img src="/../../../assets/png/SpringCloud/%E6%96%AD%E8%B7%AF%E5%99%A8%E7%9B%91%E6%8E%A7-%E7%9B%91%E6%8E%A7%E5%9B%BE%E8%A7%A3.png" alt="断路器监控-监控图解"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求:&quot;&gt;&lt;/a&gt;需求:&lt;/h1&gt;&lt;p&gt;断路器，是当数据服务不可用的时候， 断路器就会发挥作用。&lt;br&gt;那么数据服务什么时候可用，什么时候不可用，如何监控这个事情呢？ 我们就要</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列1-父子(聚合)项目</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%971-%E7%88%B6%E5%AD%90(%E8%81%9A%E5%90%88)%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%971-%E7%88%B6%E5%AD%90(%E8%81%9A%E5%90%88)%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud代码结构"><a href="#SpringCloud代码结构" class="headerlink" title="SpringCloud代码结构"></a>SpringCloud代码结构</h1><p><img src="/../../../assets/png/SpringCloud/SpringCloud%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png" alt="SpringCloud代码结构" title="SpringCloud代码结构"></p><h1 id="创建父项目-spring-cloud-parent"><a href="#创建父项目-spring-cloud-parent" class="headerlink" title="创建父项目: spring-cloud-parent"></a>创建父项目: spring-cloud-parent</h1><p>修改pom：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p>注意： 父项目只有pom.xml文件， packaging值为pom.</p><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.6.RELEASE&lt;/version&gt;  &lt;!-- 踩坑:版本不对会导致Feign连接不上，亲测其它版本, 2.3.3.RELEASE version. --&gt;</span><br><span class="line">&lt;relativePath/&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;spring-cloud-parent&lt;/name&gt;</span><br><span class="line">&lt;description&gt;spring-cloud-parent project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Finchley.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h1 id="创建子项目-product-data-service"><a href="#创建子项目-product-data-service" class="headerlink" title="创建子项目: product-data-service"></a>创建子项目: product-data-service</h1><p>修改pom：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;artifactId&gt;product-data-service&lt;/artifactId&gt;</span><br><span class="line">&lt;name&gt;product-data-service&lt;/name&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud代码结构&quot;&gt;&lt;a href=&quot;#SpringCloud代码结构&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud代码结构&quot;&gt;&lt;/a&gt;SpringCloud代码结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/../../.</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列12-断路器聚合监控</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9712-%E6%96%AD%E8%B7%AF%E5%99%A8%E8%81%9A%E5%90%88%E7%9B%91%E6%8E%A7/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9712-%E6%96%AD%E8%B7%AF%E5%99%A8%E8%81%9A%E5%90%88%E7%9B%91%E6%8E%A7/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h1><p>前面是针对一个微服务的断路器监控，但是微服务通常会是多个实例组成的一个集群。 倘若集群里的实例比较多，难道要挨个挨个去监控这些实例吗？ 何况有时候，根据集群的需要，会动态增加或者减少实例，监控起来就更麻烦了。</p><p>为了方便监控集群里的多个实例，springCloud 提供了一个 turbine 项目，它的作用是把一个集群里的多个实例汇聚在一个 turbine里，这个然后再在 断路器监控里查看这个 turbine, 这样就能够在集群层面进行监控了。<br><img src="/../../../assets/png/SpringCloud/%E6%96%AD%E8%B7%AF%E5%99%A8%E8%81%9A%E5%90%88%E7%9B%91%E6%8E%A7-%E6%B5%81%E7%A8%8B.png" alt="断路器聚合监控-流程"></p><h1 id="创建子项目：-turbine"><a href="#创建子项目：-turbine" class="headerlink" title="创建子项目： turbine"></a>创建子项目： turbine</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml:"></a>pom.xml:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;turbine&lt;/artifactId&gt;</span><br><span class="line">    &lt;name&gt;turbine&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-turbine&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="ProductServiceTurbineApplication-java"><a href="#ProductServiceTurbineApplication-java" class="headerlink" title="ProductServiceTurbineApplication.java"></a>ProductServiceTurbineApplication.java</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import cn.hutool.core.util.NetUtil;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.cloud.netflix.turbine.EnableTurbine;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableTurbine</span><br><span class="line">public class ProductServiceTurbineApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int port = 8021;</span><br><span class="line">        if(!NetUtil.isUsableLocalPort(port)) &#123;</span><br><span class="line">            System.err.printf(&quot;端口%d被占用了，无法启动%n&quot;, port );</span><br><span class="line">            System.exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        new SpringApplicationBuilder(ProductServiceTurbineApplication.class).properties(&quot;server.port=&quot; + port).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>配置信息，主要是：appConfig: product-view-service-feign, 这就表示它会把所有微服务名称是product-view-service-feign 的实例信息都收集起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application.name: turbine</span><br><span class="line">turbine:</span><br><span class="line">  aggregator:</span><br><span class="line">    clusterConfig: default  # 指定聚合哪些集群，多个使用&quot;,&quot;分割，默认为default。可使用http://.../turbine.stream?cluster=&#123;clusterConfig之一&#125;访问</span><br><span class="line">  appConfig: product-view-service-feign  ### 配置Eureka中的serviceId列表，表明监控哪些服务</span><br><span class="line">  clusterNameExpression: new String(&quot;default&quot;)</span><br><span class="line">  # 1. clusterNameExpression指定集群名称，默认表达式appName；此时：turbine.aggregator.clusterConfig需要配置想要监控的应用名称</span><br><span class="line">  # 2. 当clusterNameExpression:default时，turbine.aggregator.clusterConfig可以不写，因为默认就是default</span><br><span class="line">  # 3. 当clusterNameExpression:metadata[&#x27;cluster&#x27;]时，假设想要监控的应用配置了eureka.instance.metadata-map.cluster: ABC，则需要配置，同时turbine.aggregator.clusterConfig: ABC</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求:&quot;&gt;&lt;/a&gt;需求:&lt;/h1&gt;&lt;p&gt;前面是针对一个微服务的断路器监控，但是微服务通常会是多个实例组成的一个集群。 倘若集群里的实例比较多，难道要挨个挨个去监控这些实例吗？ </summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列14-总结</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9714-%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9714-%E6%80%BB%E7%BB%93/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多个微服务"><a href="#多个微服务" class="headerlink" title="多个微服务:"></a>多个微服务:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;product-data-service&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;product-view-service-ribbon&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;product-view-service-feign&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;config-server&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;hystrix-dashboard&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;turbine&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;productServiceZuul&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure><h1 id="端口号总结"><a href="#端口号总结" class="headerlink" title="端口号总结:"></a>端口号总结:</h1><p>微服务：</p><ul><li>eureka-server: 8761</li><li>product-data-service: 8001,8002,8003</li><li>product-view-service-ribbon: 8010</li><li>product-view-service-feign: 8012, 8013, 8014</li><li>hystrix-dashboard: 8020</li><li>turbine: 8021</li><li>config-server: 8030</li><li>zuul: 8040</li></ul><p>第三方: </p><ul><li>zipkin:9411</li><li>rabbitMQ: 5672</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多个微服务&quot;&gt;&lt;a href=&quot;#多个微服务&quot; class=&quot;headerlink&quot; title=&quot;多个微服务:&quot;&gt;&lt;/a&gt;多个微服务:&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列2-服务注册中心</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%972-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%972-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建子项目-eureka-server"><a href="#创建子项目-eureka-server" class="headerlink" title="创建子项目: eureka-server"></a>创建子项目: eureka-server</h1><p>pom.xml ，增加 spring-cloud-starter-netflix-eureka-server jar 包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;name&gt;eureka-server&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h1 id="启动类-EurekaServerApplication"><a href="#启动类-EurekaServerApplication" class="headerlink" title="启动类: EurekaServerApplication"></a>启动类: EurekaServerApplication</h1><ul><li>EurekaServer，它扮演的角色是注册中心，用于注册各种微服务，以便于其他微服务找到和访问。</li><li>EurekaServer 本身就是个 Springboot 微服务, 所以它有 @SpringBootApplication 注解。</li><li>@EnableEurekaServer 表示这是个 EurekaServer 。<br>完整代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import cn.hutool.core.util.NetUtil;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class EurekaServerApplication</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //8761 这个端口是默认的，就不要修改了，后面的子项目，都会访问这个端口。</span><br><span class="line">        int port = 8761;</span><br><span class="line">        if(!NetUtil.isUsableLocalPort(port)) &#123;</span><br><span class="line">            System.err.printf(&quot;端口%d被占用了，无法启动%n&quot;, port );</span><br><span class="line">            System.exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        new SpringApplicationBuilder(EurekaServerApplication.class).properties(&quot;server.port=&quot; + port).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h1><ul><li>设置微服务的名称： eureka-server</li><li>hostname: localhost 表示主机名称。</li><li>registerWithEureka：false. 表示是否注册到服务器。 因为它本身就是服务器，所以就无需把自己注册到服务器了。</li><li>fetchRegistry: false. 表示是否获取服务器的注册信息，和上面同理，这里也设置为 false。</li><li>defaultZone： http:&#x2F;&#x2F;${eureka.instance.hostname}:${server.port}&#x2F;eureka&#x2F; 自己作为服务器，公布出来的地址。 比如后续某个微服务要把自己注册到 eureka server, 那么就要使用这个地址： <a href="http://localhost:8761/eureka/">http://localhost:8761/eureka/</a></li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    registerWithEureka: false</span><br><span class="line">    fetchRegistry: false</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><span class="line"> </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server</span><br></pre></td></tr></table></figure></li></ul><h2 id="启动并访问注册中心Eureka"><a href="#启动并访问注册中心Eureka" class="headerlink" title="启动并访问注册中心Eureka:"></a>启动并访问注册中心Eureka:</h2><p>运行 EurekaServerApplication，并访问：<a href="http://127.0.0.1:8761/%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%BA%EF%BC%9A8761%E3%80%82">http://127.0.0.1:8761/，默认端口号为：8761。</a><br><img src="/../../../assets/png/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8.png" alt="注册中心默认启动"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建子项目-eureka-server&quot;&gt;&lt;a href=&quot;#创建子项目-eureka-server&quot; class=&quot;headerlink&quot; title=&quot;创建子项目: eureka-server&quot;&gt;&lt;/a&gt;创建子项目: eureka-server&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列3-注册数据微服务</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%973-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%973-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%BE%AE%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建子项目-product-data-service"><a href="#创建子项目-product-data-service" class="headerlink" title="创建子项目: product-data-service"></a>创建子项目: product-data-service</h1><p>注意：若前面父子(聚合)项目创建了数据微服务，可直接更新此微服务。<br>修改 pom.xml 为如下：</p><ul><li>spring-cloud-starter-netflix-eureka-client 表示这是个 eureka 客户端。</li><li>spring-boot-starter-web: 表示这是个web服务，会提供控制层<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;product-data-service&lt;/artifactId&gt;</span><br><span class="line">    &lt;name&gt;product-data-service&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="启动类ProductDataServiceApplication"><a href="#启动类ProductDataServiceApplication" class="headerlink" title="启动类ProductDataServiceApplication"></a>启动类ProductDataServiceApplication</h1><ul><li>启动类， 考虑到要做集群。 自己输入端口，推荐 8001，8002，8003.</li><li>注意：这里忽略controller、 service、 repository, html层的代码，只列出重要部分代码，如需了解详情可参阅以下地址获取代码：<a href="https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud">https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud</a>.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class ProductDataServiceApplication</span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        SpringApplication.run(ProductDataServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h1><ul><li>设置微服务的名称： product-data-service</li><li>设置注册中心的地址： <a href="http://localhost:8761/eureka/">http://localhost:8761/eureka/</a>, 与eureka-server中的配置 application.yml一致。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#   server:</span><br><span class="line">#   port: 因为会启动多个 product-data-service, 所以端口号由用户自动设置，推荐 8001,8002,8003</span><br><span class="line"> </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: product-data-service</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure><h2 id="启动并访问注册中心Eureka"><a href="#启动并访问注册中心Eureka" class="headerlink" title="启动并访问注册中心Eureka:"></a>启动并访问注册中心Eureka:</h2><p>刷新访问：<a href="http://127.0.0.1:8761/%E3%80%82">http://127.0.0.1:8761/。</a><br><img src="/../../../assets/png/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="注册中心-注册数据微服务"></p><h2 id="补充-上图红色信息-："><a href="#补充-上图红色信息-：" class="headerlink" title="补充(上图红色信息)："></a>补充(上图红色信息)：</h2><ul><li><span style="color: red">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</span></li><li>上面这句话意思是，Eureka可能会声明已经不存在的实例。刷新数小于阈值时，为了安全起见不会剔除过期实例。</li><li>Eureka的默认阈值为：85%</li><li>比如目前有10个微服务，只有8个有心跳反应时，（8&#x2F;10&#x3D;80%&lt;85%）Eureka就会开启保护机制，过期的实例不会立马剔除。并且出这个紧急警告，在搭建Eureka Server时，比如我们搭建了2个Eureka Server，并且禁止自注册，Eureka Server自身算一个服务，那么其中任意一个Eureka，只能获得一个心跳，1&#x2F;2&#x3D;50%。那么也会出现这个警告。</li><li>当不想有这个红色警告是，本机自测可以关闭Eureka保护配置。生产环境下不要关。<br>在application.yml文件中配置：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  enable-self-preservation: false</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建子项目-product-data-service&quot;&gt;&lt;a href=&quot;#创建子项目-product-data-service&quot; class=&quot;headerlink&quot; title=&quot;创建子项目: product-data-service&quot;&gt;&lt;/a&gt;创建子项目: </summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列4-视图微服务-RIBBON</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%974-%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1-RIBBON/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%974-%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1-RIBBON/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ribbon-概念"><a href="#Ribbon-概念" class="headerlink" title="Ribbon 概念"></a>Ribbon 概念</h1><p>访问前面注册好的数据微服务, springcloud 提供了两种方式:</p><ul><li>Ribbon: 是使用 restTemplate 进行调用，并进行客户端负载均衡。</li><li>Feign: 是对 Ribbon的封装，调用起来更简单。</li></ul><p>什么是客户端负载均衡:<br><code>在前面注册数据微服务里，注册了8001和8002两个微服务， Ribbon会从注册中心获知这个信息，然后由 Ribbon 这个客户端自己决定是调用哪个，这个就叫做客户端负载均衡。</code></p><h1 id="创建子项目-product-view-service-ribbon"><a href="#创建子项目-product-view-service-ribbon" class="headerlink" title="创建子项目: product-view-service-ribbon"></a>创建子项目: product-view-service-ribbon</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>包含以下jar:</p><ul><li>spring-cloud-starter-netflix-eureka-client: eureka 客户端</li><li>spring-boot-starter-web： springmvc</li><li>spring-boot-starter-thymeleaf： thymeleaf 做服务端渲染，(前后端分离项目不用配置)。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;product-view-service-ribbon&lt;/artifactId&gt;</span><br><span class="line">    &lt;name&gt;product-view-service-ribbon&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="Ribbon-客户端"><a href="#Ribbon-客户端" class="headerlink" title="Ribbon 客户端"></a>Ribbon 客户端</h2><p>Ribbon客户端: 通过restTemplate 访问 <a href="http://product-data-service/products,%E8%80%8C">http://PRODUCT-DATA-SERVICE/products,而</a> product-data-service既不是域名也不是ip地址，而是数据服务在eureka 注册中心的名称.</p><p>注意: 这里只是指定了要访问的 微服务名称，但是并没有指定端口号到底是8001, 还是8002.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.client;</span><br><span class="line"></span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class ProductClientRibbon &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    public List&lt;Product&gt; listProdcuts() &#123;</span><br><span class="line">        return restTemplate.getForObject(&quot;http://PRODUCT-DATA-SERVICE/products&quot;,List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-code"><a href="#Java-code" class="headerlink" title="Java code:"></a>Java code:</h2><ul><li><p>注意：这里忽略controller、 service、 repository, html层的代码，只列出重要部分代码，如需了解详情可参阅以下地址获取代码：<a href="https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud">https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud</a>.</p></li><li><p>服务类: ProductServiceImpl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.service.impl;</span><br><span class="line"></span><br><span class="line">import cn.peach.client.ProductClientRibbon;</span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import cn.peach.service.ProductService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class ProductServiceImpl implements ProductService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    ProductClientRibbon productClientRibbon;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Product&gt; listProducts() &#123;</span><br><span class="line">        return productClientRibbon.listProdcuts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动类，注解多了个 @EnableDiscoveryClient，表示用于发现eureka 注册中心的微服务, </p></li><li><p>启动类，多了个 RestTemplate，就表示用 restTemplate 这个工具来做负载均衡,</p></li><li><p>考虑到要做集群。 自己输入端口，推荐 80010，8002，8003.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ProductViewServiceRibbonApplication &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main( String[] args ) &#123;</span><br><span class="line">        SpringApplication.run(ProductDataServiceApplication.class, args);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    RestTemplate restTemplate() &#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h2><p>配置类，指定了 eureka server 的地址，以及自己的名称。 另外是一些 thymeleaf 的默认配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: product-view-service-ribbon</span><br><span class="line">  thymeleaf:</span><br><span class="line">    cache: false</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    content-type: text/html</span><br><span class="line">    mode: HTML5  </span><br></pre></td></tr></table></figure></li></ul><h2 id="启动并访问注册中心Eureka"><a href="#启动并访问注册中心Eureka" class="headerlink" title="启动并访问注册中心Eureka:"></a>启动并访问注册中心Eureka:</h2><p>刷新访问：<a href="http://127.0.0.1:8761/%E3%80%82">http://127.0.0.1:8761/。</a><br><img src="/../../../assets/png/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%92%8C%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="注册中心-注册数据和视图微服务"></p><h2 id="启动并访问视图微服务product-view-service-ribbon"><a href="#启动并访问视图微服务product-view-service-ribbon" class="headerlink" title="启动并访问视图微服务product-view-service-ribbon:"></a>启动并访问视图微服务product-view-service-ribbon:</h2><p>刷新访问：<a href="http://127.0.0.1:8010/products%E3%80%82">http://127.0.0.1:8010/products。</a><br><img src="/../../../assets/png/SpringCloud/%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="视图微服务"></p><h2 id="调用图："><a href="#调用图：" class="headerlink" title="调用图："></a>调用图：</h2><p>如图所示：</p><ul><li>首先数据微服务和视图微服务都被 eureka 管理起来了。</li><li>数据服务是由两个实例的集群组成的，端口分别是 8001 ， 8002</li><li>视图微服务通过 注册中心调用微服务， 然后负载均衡到 8001 或者 8002 端口的应用上。<br><img src="/../../../assets/png/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%95%B0%E6%8D%AE-%E8%A7%86%E5%9B%BE-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" alt="微服务调用关系"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ribbon-概念&quot;&gt;&lt;a href=&quot;#Ribbon-概念&quot; class=&quot;headerlink&quot; title=&quot;Ribbon 概念&quot;&gt;&lt;/a&gt;Ribbon 概念&lt;/h1&gt;&lt;p&gt;访问前面注册好的数据微服务, springcloud 提供了两种方式:&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列6-服务链路追踪</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%976-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%976-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是服务链路"><a href="#什么是服务链路" class="headerlink" title="什么是服务链路"></a>什么是服务链路</h1><p>我们有两个微服务，分别是数据服务和视图服务，随着业务的增加，就会有越来越多的微服务存在，他们之间也会有更加复杂的调用关系。<br>这个调用关系，仅仅通过观察代码，会越来越难以识别，所以就需要通过 zipkin 服务链路追踪服务器 这个东西来用图片进行识别了</p><h1 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h1><ul><li>eureka-server 不需要做改造;</li><li>product-data-service和product-view-service 需要进行改造以使其可以被追踪到。</li></ul><h2 id="pom-xml都加上以下依赖："><a href="#pom-xml都加上以下依赖：" class="headerlink" title="pom.xml都加上以下依赖："></a>pom.xml都加上以下依赖：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--服务链路追踪--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="application-yml都加上以下配置信息："><a href="#application-yml都加上以下配置信息：" class="headerlink" title="application.yml都加上以下配置信息："></a>application.yml都加上以下配置信息：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http://localhost:9411 </span><br></pre></td></tr></table></figure><h2 id="启动类都加上以下配置信息："><a href="#启动类都加上以下配置信息：" class="headerlink" title="启动类都加上以下配置信息："></a>启动类都加上以下配置信息：</h2><p>ProductDataServiceApplication.java 和 ProductViewServiceFeignApplication.java：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Sampler defaultSampler() &#123;</span><br><span class="line">    return Sampler.ALWAYS_SAMPLE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="启动测试："><a href="#启动测试：" class="headerlink" title="启动测试："></a>启动测试：</h1><ul><li>需要启动链路追踪服务器：zipkin-server-2.10.1-exec.jar, 命令启动:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.10.1-exec.jar</span><br></pre></td></tr></table></figure></li><li>启动 eureka-server, 改造后的 product-data-service 和 product-view-service-feign;</li><li>访问一次 <a href="http://127.0.0.1:8012/products">http://127.0.0.1:8012/products</a> 通过 视图微服务去访问数据微服务，这样链路追踪服务器才知道有这事儿发生</li><li>然后打开链路追踪服务器 <a href="http://localhost:9411/zipkin/dependency/">http://localhost:9411/zipkin/dependency/</a> 就可以看到如图所示的 视图微服务调用数据微服务 的图形了<br><img src="/../../../assets/png/SpringCloud/%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BE%AE%E6%9C%8D%E5%8A%A1-zipkin.png" alt="视图微服务调用数据微服务"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是服务链路&quot;&gt;&lt;a href=&quot;#什么是服务链路&quot; class=&quot;headerlink&quot; title=&quot;什么是服务链路&quot;&gt;&lt;/a&gt;什么是服务链路&lt;/h1&gt;&lt;p&gt;我们有两个微服务，分别是数据服务和视图服务，随着业务的增加，就会有越来越多的微服务存在，他们之间也会</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列5-视图微服务-Feign</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%975-%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1-Feign/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%975-%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1-Feign/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Feign-概念"><a href="#Feign-概念" class="headerlink" title="Feign 概念:"></a>Feign 概念:</h1><p>是对Ribbon的封装，调用起来更简单。</p><h2 id="代码片段的区别"><a href="#代码片段的区别" class="headerlink" title="代码片段的区别"></a>代码片段的区别</h2><ul><li>Ribbon方式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">public List&lt;Product&gt; listProdcuts() &#123;</span><br><span class="line">    return restTemplate.getForObject(&quot;http://PRODUCT-DATA-SERVICE/products&quot;,List.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Feign方式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value = &quot;PRODUCT-DATA-SERVICE&quot;)</span><br><span class="line">public interface ProductClientFeign &#123;</span><br><span class="line"> </span><br><span class="line">    @GetMapping(&quot;/products&quot;)</span><br><span class="line">    public List&lt;Product&gt; listProdcuts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="创建子项目-product-view-service-feign"><a href="#创建子项目-product-view-service-feign" class="headerlink" title="创建子项目 product-view-service-feign"></a>创建子项目 product-view-service-feign</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml:"></a>pom.xml:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;product-view-service-feign&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="Feign-客户端"><a href="#Feign-客户端" class="headerlink" title="Feign 客户端:"></a>Feign 客户端:</h2><p>Feign 客户端， 通过 注解方式 访问 访问PRODUCT-DATA-SERVICE服务的 products路径， product-data-service 既不是域名也不是ip地址，而是 数据服务在 eureka 注册中心的名称。</p><p>注意: 这里只是指定了要访问的 微服务名称，但是并没有指定端口号到底是 8001, 还是 8002.</p><ul><li>Feign方式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.client;</span><br><span class="line"></span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;PRODUCT-DATA-SERVICE&quot;)</span><br><span class="line">public interface ProductClientFeign &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/products&quot;)</span><br><span class="line">    public List&lt;Product&gt; listProdcuts();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Java-code"><a href="#Java-code" class="headerlink" title="Java code:"></a>Java code:</h2><ul><li><p>注意：这里忽略controller、 service、 repository, html层的代码，只列出重要部分代码，如需了解详情可参阅以下地址获取代码：<a href="https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud">https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud</a>.</p></li><li><p>服务类: ProductServiceImpl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.service.impl;</span><br><span class="line"></span><br><span class="line">import cn.peach.client.ProductClientFeign;</span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import cn.peach.service.ProductService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class ProductServiceImpl implements ProductService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    ProductClientFeign productClientFeign;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Product&gt; listProducts() &#123;</span><br><span class="line">        return productClientFeign.listProdcuts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动类，注解多了个 @EnableFeignClients， 表示用于使用 Feign 方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ProductViewServiceFeignApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 推荐  8012 、 8013  或者  8014</span><br><span class="line">        SpringApplication.run(ProductViewServiceFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h2><p>配置类，指定了 eureka server 的地址，以及自己的名称。 另外是一些 thymeleaf 的默认配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: product-view-service-feign</span><br><span class="line">  thymeleaf:</span><br><span class="line">    cache: false</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    content-type: text/html</span><br><span class="line">    mode: HTML5    </span><br></pre></td></tr></table></figure><h2 id="启动并访问注册中心Eureka"><a href="#启动并访问注册中心Eureka" class="headerlink" title="启动并访问注册中心Eureka:"></a>启动并访问注册中心Eureka:</h2><p>刷新访问：<a href="http://127.0.0.1:8761/%E3%80%82">http://127.0.0.1:8761/。</a><br><img src="/../../../assets/png/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%92%8C%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1Feign.png" alt="注册中心-注册数据和视图微服务"></p><h2 id="启动并访问视图微服务product-view-service-feign"><a href="#启动并访问视图微服务product-view-service-feign" class="headerlink" title="启动并访问视图微服务product-view-service-feign:"></a>启动并访问视图微服务product-view-service-feign:</h2><p>刷新访问：<a href="http://127.0.0.1:8012/products%E3%80%82">http://127.0.0.1:8012/products。</a><br><img src="/../../../assets/png/SpringCloud/%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1Feign.png" alt="视图微服务"></p><h2 id="调用图："><a href="#调用图：" class="headerlink" title="调用图："></a>调用图：</h2><p>如图所示：</p><ul><li>首先数据微服务和视图微服务都被 eureka 管理起来了。</li><li>数据服务是由两个实例的集群组成的，端口分别是 8001 ， 8002</li><li>视图微服务通过 注册中心调用微服务， 然后负载均衡到 8001 或者 8002 端口的应用上。<br><img src="/../../../assets/png/SpringCloud/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%95%B0%E6%8D%AE-%E8%A7%86%E5%9B%BE-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" alt="微服务调用关系"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Feign-概念&quot;&gt;&lt;a href=&quot;#Feign-概念&quot; class=&quot;headerlink&quot; title=&quot;Feign 概念:&quot;&gt;&lt;/a&gt;Feign 概念:&lt;/h1&gt;&lt;p&gt;是对Ribbon的封装，调用起来更简单。&lt;/p&gt;
&lt;h2 id=&quot;代码片段的区别&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列8-配置客户端</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%978-%E9%85%8D%E7%BD%AE%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%978-%E9%85%8D%E7%BD%AE%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h1><p>把现成的 视图微服务-Feign 改造成配置客户端，使得其可以从配置服务器上获取版本信息。</p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>增加一个 spring-cloud-starter-config 用于访问配置服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h2><ul><li>作为配置客户端，它需要在 bootstrap.yml 里配置 config-server 的信息，而不是像以前那样在 application.yml 里进行配置。</li><li>bootstrap.yml 和 application.yml 的区别，简单说就是前者先启动，并且一些系统方面的配置需要在 bootstrap.yml 里进行配置。</li><li>在 bootstrap.yml 里配置提供了 serviceId: config-server, 这个是配置服务器在 eureka server 里的服务名称，这样就可以定位 config-server了。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      label: develop</span><br><span class="line">      profile: dev</span><br><span class="line">      discovery:</span><br><span class="line">        enabled:  true</span><br><span class="line">        serviceId:  config-server</span><br><span class="line">    bus:</span><br><span class="line">      enabled: true</span><br><span class="line">      trace:</span><br><span class="line">        enabled: true</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone:  http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure></li></ul><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>把 eureka 地址信息移动到了 bootstrap.yml 里。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name:  product-view-service-feign</span><br><span class="line">  thymeleaf:</span><br><span class="line">    cache: false</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    content-type: text/html</span><br><span class="line">    mode: HTML5       </span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http://localhost:9411 </span><br></pre></td></tr></table></figure><h2 id="ProductController-java"><a href="#ProductController-java" class="headerlink" title="ProductController.java"></a>ProductController.java</h2><p>增加这个属性，就可以从 config-server 去获取 version 信息了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;version&#125;&quot;)</span><br><span class="line">String version;</span><br></pre></td></tr></table></figure><p>然后把这个信息放在 Model里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.addAttribute(&quot;version&quot;, version);    </span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RefreshScope</span><br><span class="line">public class ProductController &#123;</span><br><span class="line">    @Autowired ProductService productService;</span><br><span class="line">     </span><br><span class="line">    @Value(&quot;$&#123;version&#125;&quot;)</span><br><span class="line">    String version;</span><br><span class="line">     </span><br><span class="line">    @RequestMapping(&quot;/products&quot;)</span><br><span class="line">    public Object products(Model m) &#123;</span><br><span class="line">        List&lt;Product&gt; ps = productService.listProducts();</span><br><span class="line">        m.addAttribute(&quot;version&quot;, version);    </span><br><span class="line">        m.addAttribute(&quot;ps&quot;, ps);</span><br><span class="line">        return &quot;products&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="products-html"><a href="#products-html" class="headerlink" title="products.html:"></a>products.html:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td align=&quot;center&quot; colspan=&quot;3&quot;&gt;</span><br><span class="line">        &lt;p th:text=&quot;$&#123;version&#125;&quot; &gt;how2j springcloud version unknown&lt;/p&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动:"></a>启动:</h1><p>挨个启动 EurekaServerApplication, ConfigServerApplication, ProductDataServiceApplication, ProductViewServiceFeignApplication, 然后访问如下地址：<a href="http://localhost:8012/products">http://localhost:8012/products</a><br><img src="/../../../assets/png/SpringCloud/%E9%85%8D%E7%BD%AE%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt="配置客户端"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;配置客户端&quot;&gt;&lt;a href=&quot;#配置客户端&quot; class=&quot;headerlink&quot; title=&quot;配置客户端&quot;&gt;&lt;/a&gt;配置客户端&lt;/h1&gt;&lt;p&gt;把现成的 视图微服务-Feign 改造成配置客户端，使得其可以从配置服务器上获取版本信息。&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列7-配置服务器</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%977-%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%977-%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置服务的需要"><a href="#配置服务的需要" class="headerlink" title="配置服务的需要:"></a>配置服务的需要:</h1><p>有时候，微服务要做集群，这就意味着，会有多个微服务实例。 在业务上有时候需要修改一些配置信息，比如说 版本信息吧~ 倘若没有配置服务， 那么就需要挨个修改微服务，挨个重新部署微服务，这样就比较麻烦。<br>为了偷懒， 这些配置信息就会放在一个公共的地方，比如git, 然后通过配置服务器把它获取下来，然后微服务再从配置服务器上取下来。<br>这样只要修改git上的信息，那么同一个集群里的所有微服务都立即获取相应信息了，这样就大大节约了开发，上线和重新部署的时间了。</p><p>如图所示，我们先在 git 里保存 version 信息， 然后通过 ConfigServer 去获取 version 信息， 接着不同的视图微服务实例再去 ConfigServer 里获取 version.<br><img src="/../../../assets/png/SpringCloud/ConfigServer-%E6%B5%81%E7%A8%8B.png" alt="视图微服务调用数据微服务"></p><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>首先要准备git。<br>如下是已经准备好的 git:<br><a href="https://github.com/taoliu-hub/spring-cloud-angular11/blob/develop/respo/product-view-service-feign-dev.properties">https://github.com/taoliu-hub/spring-cloud-angular11/blob/develop/respo/product-view-service-feign-dev.properties</a><br>这里就准备了版本信息： version &#x3D; Version 1.1</p><h1 id="创建子项目-config-server"><a href="#创建子项目-config-server" class="headerlink" title="创建子项目: config-server"></a>创建子项目: config-server</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>主要是 spring-cloud-config-server 这个 jar 包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;config-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;config-server&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="启动类：ConfigServerApplication"><a href="#启动类：ConfigServerApplication" class="headerlink" title="启动类：ConfigServerApplication"></a>启动类：ConfigServerApplication</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableConfigServer</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class ConfigServerApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 推荐  8030</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-server</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      label: develop</span><br><span class="line">      name: product-view-service-feign</span><br><span class="line">      profile: dev</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https://github.com/taoliu-hub/spring-cloud-angular11.git</span><br><span class="line">          searchPaths: respo</span><br><span class="line">          default-label: main</span><br><span class="line">          timeout: 500000</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>先启动 EurekaServerApplication， 再启动 ConfigServerApplication， 然后访问<br><a href="http://localhost:8030/version/dev">http://localhost:8030/version/dev</a><br><img src="/../../../assets/png/SpringCloud/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="配置服务器"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;配置服务的需要&quot;&gt;&lt;a href=&quot;#配置服务的需要&quot; class=&quot;headerlink&quot; title=&quot;配置服务的需要:&quot;&gt;&lt;/a&gt;配置服务的需要:&lt;/h1&gt;&lt;p&gt;有时候，微服务要做集群，这就意味着，会有多个微服务实例。 在业务上有时候需要修改一些配置信息，比</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列9-消息总线Bus</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%979-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BFBus/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%979-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BFBus/</id>
    <published>2021-10-05T16:00:00.000Z</published>
    <updated>2022-05-18T02:29:48.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><p>虽然配置了config-server, 也把视图服务改造成了配置客户端，但是当需要刷新配置信息的时候，不得不既重启 config-server, 又重启微服务。 这样的体验当然是不太好的。 我们当然是希望一旦 git 上的配置信息修改之后，就可以自动地刷新到微服务里，而不是需要手动重启才可以。</p><h1 id="RabbitMQ："><a href="#RabbitMQ：" class="headerlink" title="RabbitMQ："></a>RabbitMQ：</h1><ul><li>springCloud 通过 rabbitMQ 来进行消息广播，以达到有配置信息发生改变的时候，广播给多个微服务的效果。</li><li>需要先安装 rabbitMQ 服务器。</li></ul><h1 id="改造"><a href="#改造" class="headerlink" title="改造:"></a>改造:</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml:"></a>pom.xml:</h2><p>product-view-service-feign:</p><ul><li>新增spring-boot-starter-actuator 用于访问路径：&#x2F;actuator&#x2F;bus-refresh</li><li>新增spring-cloud-starter-bus-amqp 用于支持 rabbitmq</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--多了spring-boot-starter-actuator 用于访问路径：/actuator/bus-refresh--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--多了spring-cloud-starter-bus-amqp 用于支持 rabbitmq--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml:"></a>bootstrap.yml:</h2><p>新增 but总线配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    bus:</span><br><span class="line">      enabled: true</span><br><span class="line">      trace:</span><br><span class="line">        enabled: true</span><br></pre></td></tr></table></figure><p>新增 rabbitMQ 配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq:</span><br><span class="line">  host: localhost</span><br><span class="line">  port: 5672</span><br><span class="line">  username: guest</span><br><span class="line">  password: guest</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      label: develop</span><br><span class="line">      profile: dev</span><br><span class="line">      discovery:</span><br><span class="line">        enabled:  true</span><br><span class="line">        serviceId:  config-server</span><br><span class="line">    bus:</span><br><span class="line">      enabled: true</span><br><span class="line">      trace:</span><br><span class="line">        enabled: true</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone:  http://localhost:8761/eureka/</span><br><span class="line"></span><br><span class="line">rabbitmq:</span><br><span class="line">  host: localhost</span><br><span class="line">  port: 5672</span><br><span class="line">  username: guest</span><br><span class="line">  password: guest</span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml:"></a>application.yml:</h2><p>新增路径访问允许,这样才能访问 &#x2F;actuator&#x2F;bus-refresh:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;*&quot;</span><br><span class="line">      cors:</span><br><span class="line">        allowed-origins: &quot;*&quot;</span><br><span class="line">        allowed-methods: &quot;*&quot; </span><br></pre></td></tr></table></figure><h2 id="FreshConfigUtil-java"><a href="#FreshConfigUtil-java" class="headerlink" title="FreshConfigUtil.java"></a>FreshConfigUtil.java</h2><p>使用 post 的方式访问 <a href="http://localhost:8012/actuator/bus-refresh">http://localhost:8012/actuator/bus-refresh</a> 地址，之所以要专门做一个 FreshConfigUtil 类，就是为了可以使用 post 访问，因为它不支持 get 方式访问，直接把这个地址放在浏览器里，是会抛出 405错误的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.util;/*</span><br><span class="line"> * Create By Tao on 2022/4/24.</span><br><span class="line"> *</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">import cn.hutool.http.HttpUtil;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class FreshConfigUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashMap&lt;String,String&gt; headers =new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;Content-Type&quot;, &quot;application/json; charset=utf-8&quot;);</span><br><span class="line">        System.out.println(&quot;因为要去git获取，还要刷新config-server, 会比较卡，所以一般会要好几秒才能完成，请耐心等待&quot;);</span><br><span class="line"></span><br><span class="line">        String result = HttpUtil.createPost(&quot;http://localhost:8012/actuator/bus-refresh&quot;).addHeaders(headers).execute().body();</span><br><span class="line">        System.out.println(&quot;result:&quot;+result);</span><br><span class="line">        System.out.println(&quot;refresh 完成&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对服务链路追踪的影响"><a href="#对服务链路追踪的影响" class="headerlink" title="对服务链路追踪的影响"></a>对服务链路追踪的影响</h2><p>因为视图服务进行了改造，支持了 rabbitMQ, 那么在默认情况下，它的信息就不会进入 Zipkin了。 在Zipkin 里看不到视图服务的资料了。<br>为了解决这个问题，在启动 Zipkin 的时候 带一个参数就好了：–zipkin.collector.rabbitmq.addresses&#x3D;localhost<br>即改成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.10.1-exec.jar --zipkin.collector.rabbitmq.addresses=localhost</span><br></pre></td></tr></table></figure><p><code>注： 重启 zipkin 后，要再访问业务地址才可以看到依赖关系。</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h1&gt;&lt;p&gt;虽然配置了config-server, 也把视图服务改造成了配置客户端，但是当需要刷新配置信息的时候，不得不既重启 config-s</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>Solr基础</title>
    <link href="http://example.com/blog/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/Solr/Solr%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/blog/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/Solr/Solr%E5%9F%BA%E7%A1%80/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2022-05-18T02:32:11.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solr概念："><a href="#Solr概念：" class="headerlink" title="Solr概念："></a>Solr概念：</h2><p>以连接数据库为类比：Lucene 就相当于JDBC，是基本的用法。<br>Solr 就相当 Mybatis， 方便开发人员配置，访问和调用。<br>而且Solr 被做成了 webapp形式，以tomcat的应用的方式启动，提供了可视化的配置界面</p><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><p>官网(<a href="https://lucene.apache.org/solr/)%E4%B8%8B%E8%BD%BDsolr%E5%B9%B6%E8%A7%A3%E5%8E%8B(%E6%88%91%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AFsolr-7.2.1.rar)">https://lucene.apache.org/solr/)下载solr并解压(我下载的是solr-7.2.1.rar)</a>, 我的解压目录在 D:\software\solr-7.2.1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd d:\software\solr-7.2.1\bin</span><br><span class="line">solr.cmd start</span><br></pre></td></tr></table></figure><p>如此就启动了服务器，会占用端口8983。 倘若端口被占用，会启动失败.<br><img src="/../../../../assets/png/Solr/Solr%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" alt="Solr服务器启动成功"></p><h2 id="访问服务器"><a href="#访问服务器" class="headerlink" title="访问服务器:"></a>访问服务器:</h2><p>浏览器输入：<a href="http://127.0.0.1:8983/solr/#/">http://127.0.0.1:8983/solr/#/</a></p><h1 id="Core-概念："><a href="#Core-概念：" class="headerlink" title="Core 概念："></a>Core 概念：</h1><p>如果说Solr相当于一个数据库的话，那么Core就相当于一张表</p><h2 id="不要通过图形界面创建Core"><a href="#不要通过图形界面创建Core" class="headerlink" title="不要通过图形界面创建Core"></a>不要通过图形界面创建Core</h2><p>如图所示，通过图形界面创建Core会失败，应该使用 命令行方式创建Core:<br><img src="/../../../../assets/png/Solr/%E9%80%9A%E8%BF%87%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%88%9B%E5%BB%BACore%E5%A4%B1%E8%B4%A5.png" alt="通过图形界面创建Core失败"></p><h2 id="命令行方式创建Core"><a href="#命令行方式创建Core" class="headerlink" title="命令行方式创建Core"></a>命令行方式创建Core</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd d:\software\solr-7.2.1\bin</span><br><span class="line">solr.cmd create -c howToSolr</span><br></pre></td></tr></table></figure><h2 id="删除-new-core"><a href="#删除-new-core" class="headerlink" title="删除 new_core"></a>删除 new_core</h2><p>如果点击了步骤 不要通过图形界面创建Core 里的图形界面里的 Add Core,那么就会一直有错误提醒，那么按照如下方式删除 new_core 就不会再有错误提醒了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd d:\software\solr-7.2.1\bin</span><br><span class="line">solr.cmd delete -c new_core</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Solr概念：&quot;&gt;&lt;a href=&quot;#Solr概念：&quot; class=&quot;headerlink&quot; title=&quot;Solr概念：&quot;&gt;&lt;/a&gt;Solr概念：&lt;/h2&gt;&lt;p&gt;以连接数据库为类比：Lucene 就相当于JDBC，是基本的用法。&lt;br&gt;Solr 就相当 Myba</summary>
      
    
    
    
    <category term="工具和中间件" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="搜索引擎技术" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Solr" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/Solr/"/>
    
    
    <category term="Solr" scheme="http://example.com/tags/Solr/"/>
    
  </entry>
  
  <entry>
    <title>Solr创建索引</title>
    <link href="http://example.com/blog/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/Solr/Solr%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95/"/>
    <id>http://example.com/blog/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/Solr/Solr%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2022-05-18T03:01:14.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何创建索引："><a href="#如何创建索引：" class="headerlink" title="如何创建索引："></a>如何创建索引：</h2><p>solr 提供了一种方式向其中增加索引的界面，但是不太方便，也和实际工作环境不相符合。以下配置通过程序把数据加入到Solr 索引里。</p><h2 id="Product-java"><a href="#Product-java" class="headerlink" title="Product.java"></a>Product.java</h2><p>准备实体类来存放产品信息<br><strong>注：</strong> 每个字段上都有<code>@Field</code> 注解，用来告诉Solr 这些和 howToSolr core里的字段对应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"> </span><br><span class="line">import org.apache.solr.client.solrj.beans.Field;</span><br><span class="line"> </span><br><span class="line">public class Product &#123;</span><br><span class="line">     </span><br><span class="line">    @Field</span><br><span class="line">    int id;</span><br><span class="line">    @Field</span><br><span class="line">    String name;</span><br><span class="line">    @Field</span><br><span class="line">    String category;</span><br><span class="line">    @Field</span><br><span class="line">    float price;</span><br><span class="line">    @Field</span><br><span class="line">    String place;</span><br><span class="line">    @Field</span><br><span class="line">    String code;</span><br><span class="line">     </span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getCategory() &#123;</span><br><span class="line">        return category;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setCategory(String category) &#123;</span><br><span class="line">        this.category = category;</span><br><span class="line">    &#125;</span><br><span class="line">    public float getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPrice(float price) &#123;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getPlace() &#123;</span><br><span class="line">        return place;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPlace(String place) &#123;</span><br><span class="line">        this.place = place;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Product [id=&quot; + id + &quot;, name=&quot; + name + &quot;, category=&quot; + category + &quot;, price=&quot; + price + &quot;, place=&quot;</span><br><span class="line">                + place + &quot;, code=&quot; + code + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ProductUtil-java"><a href="#ProductUtil-java" class="headerlink" title="ProductUtil.java"></a>ProductUtil.java</h2><p>工具类，把 140k_products.txt 文本文件，转换为泛型是Product的集合, 参考<code>Lucene分页查询</code>工具类。</p><h2 id="SolrUtil-java"><a href="#SolrUtil-java" class="headerlink" title="SolrUtil.java"></a>SolrUtil.java</h2><p>工具类，用来把产品集合批量增加到Solr. 这里就用到了SolrJ第三方包里的api了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.apache.solr.client.solrj.SolrClient;</span><br><span class="line">import org.apache.solr.client.solrj.SolrServerException;</span><br><span class="line">import org.apache.solr.client.solrj.beans.DocumentObjectBinder;</span><br><span class="line">import org.apache.solr.client.solrj.impl.HttpSolrClient;</span><br><span class="line">import org.apache.solr.common.SolrInputDocument;</span><br><span class="line"> </span><br><span class="line">public class SolrUtil &#123;</span><br><span class="line">    public static SolrClient client;</span><br><span class="line">    private static String url;</span><br><span class="line">    static &#123;</span><br><span class="line">        url = &quot;http://localhost:8983/solr/howToSolr&quot;;</span><br><span class="line">        client = new HttpSolrClient.Builder(url).build();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static &lt;T&gt; boolean batchSaveOrUpdate(List&lt;T&gt; entities) throws SolrServerException, IOException &#123;</span><br><span class="line"> </span><br><span class="line">        DocumentObjectBinder binder = new DocumentObjectBinder();</span><br><span class="line">        int total = entities.size();</span><br><span class="line">        int count=0;</span><br><span class="line">        for (T t : entities) &#123;</span><br><span class="line">            SolrInputDocument doc = binder.toSolrInputDocument(t);</span><br><span class="line">            client.add(doc);</span><br><span class="line">            System.out.printf(&quot;添加数据到索引中，总共要添加 %d 条记录，当前添加第%d条 %n&quot;,total,++count);</span><br><span class="line">        &#125;</span><br><span class="line">        client.commit();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TestSolr4j"><a href="#TestSolr4j" class="headerlink" title="TestSolr4j:"></a>TestSolr4j:</h2><p>得到14万个产品对象，然后通过SolrUtil 工具类提交到Solr 服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.List;</span><br><span class="line">import org.apache.solr.client.solrj.SolrServerException;</span><br><span class="line"> </span><br><span class="line">public class TestSolr4j &#123;</span><br><span class="line">    public static void main(String[] args) throws SolrServerException, IOException &#123;</span><br><span class="line">        List&lt;Product&gt; products = ProductUtil.file2list(&quot;140k_products.txt&quot;);</span><br><span class="line">        SolrUtil.batchSaveOrUpdate(products);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证提交效果"><a href="#验证提交效果" class="headerlink" title="验证提交效果:"></a>验证提交效果:</h2><p><img src="/../../../../assets/png/Solr/%E9%AA%8C%E8%AF%81%E6%8F%90%E4%BA%A4%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%9C.png" alt="验证提交的数据结果.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如何创建索引：&quot;&gt;&lt;a href=&quot;#如何创建索引：&quot; class=&quot;headerlink&quot; title=&quot;如何创建索引：&quot;&gt;&lt;/a&gt;如何创建索引：&lt;/h2&gt;&lt;p&gt;solr 提供了一种方式向其中增加索引的界面，但是不太方便，也和实际工作环境不相符合。以下配置通过程</summary>
      
    
    
    
    <category term="工具和中间件" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="搜索引擎技术" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Solr" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%92%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF/Solr/"/>
    
    
    <category term="Solr" scheme="http://example.com/tags/Solr/"/>
    
  </entry>
  
</feed>
