<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TaoLiu-Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-13T08:39:43.453Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tao Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud系列14-总结</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9714-%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9714-%E6%80%BB%E7%BB%93/</id>
    <published>2022-05-13T08:31:30.061Z</published>
    <updated>2022-05-13T08:39:43.453Z</updated>
    
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列13-网关Zuul</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9713-%E7%BD%91%E5%85%B3Zuul/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9713-%E7%BD%91%E5%85%B3Zuul/</id>
    <published>2022-05-13T08:31:03.246Z</published>
    <updated>2022-05-13T08:39:27.942Z</updated>
    
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列12-断路器聚合监控</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9712-%E6%96%AD%E8%B7%AF%E5%99%A8%E8%81%9A%E5%90%88%E7%9B%91%E6%8E%A7/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9712-%E6%96%AD%E8%B7%AF%E5%99%A8%E8%81%9A%E5%90%88%E7%9B%91%E6%8E%A7/</id>
    <published>2022-05-13T08:30:43.961Z</published>
    <updated>2022-05-13T08:39:48.449Z</updated>
    
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列10-断路器Hystrix</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9710-%E6%96%AD%E8%B7%AF%E5%99%A8Hystrix/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%9710-%E6%96%AD%E8%B7%AF%E5%99%A8Hystrix/</id>
    <published>2022-05-13T08:30:00.676Z</published>
    <updated>2022-05-13T08:38:57.216Z</updated>
    
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列9-消息总线Bus</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%979-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BFBus/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%979-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BFBus/</id>
    <published>2022-05-13T08:29:27.444Z</published>
    <updated>2022-05-13T08:38:34.671Z</updated>
    
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列8-配置客户端</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%978-%E9%85%8D%E7%BD%AE%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%978-%E9%85%8D%E7%BD%AE%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2022-05-13T08:29:10.862Z</published>
    <updated>2022-05-13T08:38:21.336Z</updated>
    
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列7-配置服务器</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%977-%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%977-%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-05-13T08:28:55.334Z</published>
    <updated>2022-05-13T08:38:12.175Z</updated>
    
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列6-服务链路追踪</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%976-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%976-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</id>
    <published>2022-05-13T08:28:36.128Z</published>
    <updated>2022-05-13T08:37:34.223Z</updated>
    
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列5-视图微服务-Feign</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%975-%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1-Feign/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%975-%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1-Feign/</id>
    <published>2022-05-13T08:27:20.499Z</published>
    <updated>2022-05-13T10:35:58.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Feign-概念"><a href="#Feign-概念" class="headerlink" title="Feign 概念:"></a>Feign 概念:</h1><p>是对Ribbon的封装，调用起来更简单。</p><h2 id="代码片段的区别"><a href="#代码片段的区别" class="headerlink" title="代码片段的区别"></a>代码片段的区别</h2><ul><li>Ribbon方式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">public List&lt;Product&gt; listProdcuts() &#123;</span><br><span class="line">    return restTemplate.getForObject(&quot;http://PRODUCT-DATA-SERVICE/products&quot;,List.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Feign方式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(value = &quot;PRODUCT-DATA-SERVICE&quot;)</span><br><span class="line">public interface ProductClientFeign &#123;</span><br><span class="line"> </span><br><span class="line">    @GetMapping(&quot;/products&quot;)</span><br><span class="line">    public List&lt;Product&gt; listProdcuts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="创建子项目-product-view-service-feign"><a href="#创建子项目-product-view-service-feign" class="headerlink" title="创建子项目 product-view-service-feign"></a>创建子项目 product-view-service-feign</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml:"></a>pom.xml:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;product-view-service-feign&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="Feign-客户端"><a href="#Feign-客户端" class="headerlink" title="Feign 客户端:"></a>Feign 客户端:</h2><p>Feign 客户端， 通过 注解方式 访问 访问PRODUCT-DATA-SERVICE服务的 products路径， product-data-service 既不是域名也不是ip地址，而是 数据服务在 eureka 注册中心的名称。</p><p>注意: 这里只是指定了要访问的 微服务名称，但是并没有指定端口号到底是 8001, 还是 8002.</p><ul><li>Feign方式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.client;</span><br><span class="line"></span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;PRODUCT-DATA-SERVICE&quot;)</span><br><span class="line">public interface ProductClientFeign &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/products&quot;)</span><br><span class="line">    public List&lt;Product&gt; listProdcuts();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Java-code"><a href="#Java-code" class="headerlink" title="Java code:"></a>Java code:</h2><ul><li><p>注意：这里忽略controller、 service、 repository, html层的代码，只列出重要部分代码，如需了解详情可参阅以下地址获取代码：<a href="https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud">https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud</a>.</p></li><li><p>服务类: ProductServiceImpl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.service.impl;</span><br><span class="line"></span><br><span class="line">import cn.peach.client.ProductClientFeign;</span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import cn.peach.service.ProductService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class ProductServiceImpl implements ProductService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    ProductClientFeign productClientFeign;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Product&gt; listProducts() &#123;</span><br><span class="line">        return productClientFeign.listProdcuts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动类，注解多了个 @EnableFeignClients， 表示用于使用 Feign 方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class ProductViewServiceFeignApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 推荐  8012 、 8013  或者  8014</span><br><span class="line">        SpringApplication.run(ProductViewServiceFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h2><p>配置类，指定了 eureka server 的地址，以及自己的名称。 另外是一些 thymeleaf 的默认配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: product-view-service-feign</span><br><span class="line">  thymeleaf:</span><br><span class="line">    cache: false</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    content-type: text/html</span><br><span class="line">    mode: HTML5    </span><br></pre></td></tr></table></figure><h2 id="启动并访问注册中心Eureka"><a href="#启动并访问注册中心Eureka" class="headerlink" title="启动并访问注册中心Eureka:"></a>启动并访问注册中心Eureka:</h2><p>刷新访问：<a href="http://127.0.0.1:8761/%E3%80%82">http://127.0.0.1:8761/。</a><br><img src="/../../../assets/png/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%92%8C%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1Feign.png" alt="注册中心-注册数据和视图微服务.png"></p><h2 id="启动并访问视图微服务product-view-service-feign"><a href="#启动并访问视图微服务product-view-service-feign" class="headerlink" title="启动并访问视图微服务product-view-service-feign:"></a>启动并访问视图微服务product-view-service-feign:</h2><p>刷新访问：<a href="http://127.0.0.1:8012/products%E3%80%82">http://127.0.0.1:8012/products。</a><br><img src="/../../../assets/png/%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1Feign.png" alt="视图微服务.png"></p><h2 id="调用图："><a href="#调用图：" class="headerlink" title="调用图："></a>调用图：</h2><p>如图所示：</p><ul><li>首先数据微服务和视图微服务都被 eureka 管理起来了。</li><li>数据服务是由两个实例的集群组成的，端口分别是 8001 ， 8002</li><li>视图微服务通过 注册中心调用微服务， 然后负载均衡到 8001 或者 8002 端口的应用上。<br><img src="/../../../assets/png/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%95%B0%E6%8D%AE-%E8%A7%86%E5%9B%BE-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" alt="微服务调用关系.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Feign-概念&quot;&gt;&lt;a href=&quot;#Feign-概念&quot; class=&quot;headerlink&quot; title=&quot;Feign 概念:&quot;&gt;&lt;/a&gt;Feign 概念:&lt;/h1&gt;&lt;p&gt;是对Ribbon的封装，调用起来更简单。&lt;/p&gt;
&lt;h2 id=&quot;代码片段的区别&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列4-视图微服务-RIBBON</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%974-%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1-RIBBON/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%974-%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1-RIBBON/</id>
    <published>2022-05-13T08:25:21.444Z</published>
    <updated>2022-05-13T10:06:28.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ribbon-概念"><a href="#Ribbon-概念" class="headerlink" title="Ribbon 概念"></a>Ribbon 概念</h1><p>访问前面注册好的数据微服务, springcloud 提供了两种方式:</p><ul><li>Ribbon: 是使用 restTemplate 进行调用，并进行客户端负载均衡。</li><li>Feign: 是对 Ribbon的封装，调用起来更简单。</li></ul><p>什么是客户端负载均衡:<br><code>在前面注册数据微服务里，注册了8001和8002两个微服务， Ribbon会从注册中心获知这个信息，然后由 Ribbon 这个客户端自己决定是调用哪个，这个就叫做客户端负载均衡。</code></p><h1 id="创建子项目-product-view-service-ribbon"><a href="#创建子项目-product-view-service-ribbon" class="headerlink" title="创建子项目: product-view-service-ribbon"></a>创建子项目: product-view-service-ribbon</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>包含以下jar:</p><ul><li>spring-cloud-starter-netflix-eureka-client: eureka 客户端</li><li>spring-boot-starter-web： springmvc</li><li>spring-boot-starter-thymeleaf： thymeleaf 做服务端渲染，(前后端分离项目不用配置)。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;product-view-service-ribbon&lt;/artifactId&gt;</span><br><span class="line">    &lt;name&gt;product-view-service-ribbon&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="Ribbon-客户端"><a href="#Ribbon-客户端" class="headerlink" title="Ribbon 客户端"></a>Ribbon 客户端</h2><p>Ribbon客户端: 通过restTemplate 访问 <a href="http://product-data-service/products,%E8%80%8C">http://PRODUCT-DATA-SERVICE/products,而</a> product-data-service既不是域名也不是ip地址，而是数据服务在eureka 注册中心的名称.</p><p>注意: 这里只是指定了要访问的 微服务名称，但是并没有指定端口号到底是8001, 还是8002.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.client;</span><br><span class="line"></span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class ProductClientRibbon &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    public List&lt;Product&gt; listProdcuts() &#123;</span><br><span class="line">        return restTemplate.getForObject(&quot;http://PRODUCT-DATA-SERVICE/products&quot;,List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-code"><a href="#Java-code" class="headerlink" title="Java code:"></a>Java code:</h2><ul><li><p>注意：这里忽略controller、 service、 repository, html层的代码，只列出重要部分代码，如需了解详情可参阅以下地址获取代码：<a href="https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud">https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud</a>.</p></li><li><p>服务类: ProductServiceImpl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach.service.impl;</span><br><span class="line"></span><br><span class="line">import cn.peach.client.ProductClientRibbon;</span><br><span class="line">import cn.peach.pojo.Product;</span><br><span class="line">import cn.peach.service.ProductService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class ProductServiceImpl implements ProductService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    ProductClientRibbon productClientRibbon;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Product&gt; listProducts() &#123;</span><br><span class="line">        return productClientRibbon.listProdcuts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动类，注解多了个 @EnableDiscoveryClient，表示用于发现eureka 注册中心的微服务, </p></li><li><p>启动类，多了个 RestTemplate，就表示用 restTemplate 这个工具来做负载均衡,</p></li><li><p>考虑到要做集群。 所以让用户自己输入端口，推荐 80010，8002，8003.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ProductViewServiceRibbonApplication &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main( String[] args ) &#123;</span><br><span class="line">        SpringApplication.run(ProductDataServiceApplication.class, args);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    RestTemplate restTemplate() &#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h2><p>配置类，指定了 eureka server 的地址，以及自己的名称。 另外是一些 thymeleaf 的默认配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: product-view-service-ribbon</span><br><span class="line">  thymeleaf:</span><br><span class="line">    cache: false</span><br><span class="line">    prefix: classpath:/templates/</span><br><span class="line">    suffix: .html</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    content-type: text/html</span><br><span class="line">    mode: HTML5  </span><br></pre></td></tr></table></figure></li></ul><h2 id="启动并访问注册中心Eureka"><a href="#启动并访问注册中心Eureka" class="headerlink" title="启动并访问注册中心Eureka:"></a>启动并访问注册中心Eureka:</h2><p>刷新访问：<a href="http://127.0.0.1:8761/%E3%80%82">http://127.0.0.1:8761/。</a><br><img src="/../../../assets/png/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%92%8C%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="注册中心-注册数据和视图微服务.png"></p><h2 id="启动并访问视图微服务product-view-service-ribbon"><a href="#启动并访问视图微服务product-view-service-ribbon" class="headerlink" title="启动并访问视图微服务product-view-service-ribbon:"></a>启动并访问视图微服务product-view-service-ribbon:</h2><p>刷新访问：<a href="http://127.0.0.1:8010/products%E3%80%82">http://127.0.0.1:8010/products。</a><br><img src="/../../../assets/png/%E8%A7%86%E5%9B%BE%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="视图微服务.png"></p><h2 id="调用图："><a href="#调用图：" class="headerlink" title="调用图："></a>调用图：</h2><p>如图所示：</p><ul><li>首先数据微服务和视图微服务都被 eureka 管理起来了。</li><li>数据服务是由两个实例的集群组成的，端口分别是 8001 ， 8002</li><li>视图微服务通过 注册中心调用微服务， 然后负载均衡到 8001 或者 8002 端口的应用上。<br><img src="/../../../assets/png/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%95%B0%E6%8D%AE-%E8%A7%86%E5%9B%BE-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" alt="微服务调用关系.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ribbon-概念&quot;&gt;&lt;a href=&quot;#Ribbon-概念&quot; class=&quot;headerlink&quot; title=&quot;Ribbon 概念&quot;&gt;&lt;/a&gt;Ribbon 概念&lt;/h1&gt;&lt;p&gt;访问前面注册好的数据微服务, springcloud 提供了两种方式:&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列3-注册数据微服务</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%973-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%973-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%BE%AE%E6%9C%8D%E5%8A%A1/</id>
    <published>2022-05-13T08:24:23.455Z</published>
    <updated>2022-05-13T10:00:15.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建子项目-product-data-service"><a href="#创建子项目-product-data-service" class="headerlink" title="创建子项目: product-data-service"></a>创建子项目: product-data-service</h1><p>注意：若前面父子(聚合)项目创建了数据微服务，可直接更新此微服务。<br>修改 pom.xml 为如下：</p><ul><li>spring-cloud-starter-netflix-eureka-client 表示这是个 eureka 客户端。</li><li>spring-boot-starter-web: 表示这是个web服务，会提供控制层<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;product-data-service&lt;/artifactId&gt;</span><br><span class="line">    &lt;name&gt;product-data-service&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="启动类ProductDataServiceApplication"><a href="#启动类ProductDataServiceApplication" class="headerlink" title="启动类ProductDataServiceApplication"></a>启动类ProductDataServiceApplication</h1><ul><li>启动类， 考虑到要做集群。 所以让用户自己输入端口，推荐 8001，8002，8003.</li><li>注意：这里忽略controller、 service、 repository, html层的代码，只列出重要部分代码，如需了解详情可参阅以下地址获取代码：<a href="https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud">https://github.com/taoliu-hub/spring-cloud-angular11/tree/main/spring-cloud</a>.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class ProductDataServiceApplication</span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        SpringApplication.run(ProductDataServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h1><ul><li>设置微服务的名称： product-data-service</li><li>设置注册中心的地址： <a href="http://localhost:8761/eureka/">http://localhost:8761/eureka/</a>, 与eureka-server中的配置 application.yml一致。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#   server:</span><br><span class="line">#   port: 因为会启动多个 product-data-service, 所以端口号由用户自动设置，推荐 8001,8002,8003</span><br><span class="line"> </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: product-data-service</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure><h2 id="启动并访问注册中心Eureka"><a href="#启动并访问注册中心Eureka" class="headerlink" title="启动并访问注册中心Eureka:"></a>启动并访问注册中心Eureka:</h2><p>刷新访问：<a href="http://127.0.0.1:8761/%E3%80%82">http://127.0.0.1:8761/。</a><br><img src="/../../../assets/png/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-%E6%B3%A8%E5%86%8C%E6%95%B0%E6%8D%AE%E5%BE%AE%E6%9C%8D%E5%8A%A1.png" alt="注册中心-注册数据微服务.png"></p><h2 id="补充-上图红色信息-："><a href="#补充-上图红色信息-：" class="headerlink" title="补充(上图红色信息)："></a>补充(上图红色信息)：</h2><ul><li><span style="color: red">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</span></li><li>上面这句话意思是，Eureka可能会声明已经不存在的实例。刷新数小于阈值时，为了安全起见不会剔除过期实例。</li><li>Eureka的默认阈值为：85%</li><li>比如目前有10个微服务，只有8个有心跳反应时，（8&#x2F;10&#x3D;80%&lt;85%）Eureka就会开启保护机制，过期的实例不会立马剔除。并且出这个紧急警告，在搭建Eureka Server时，比如我们搭建了2个Eureka Server，并且禁止自注册，Eureka Server自身算一个服务，那么其中任意一个Eureka，只能获得一个心跳，1&#x2F;2&#x3D;50%。那么也会出现这个警告。</li><li>当不想有这个红色警告是，本机自测可以关闭Eureka保护配置。生产环境下不要关。<br>在application.yml文件中配置：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  enable-self-preservation: false</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建子项目-product-data-service&quot;&gt;&lt;a href=&quot;#创建子项目-product-data-service&quot; class=&quot;headerlink&quot; title=&quot;创建子项目: product-data-service&quot;&gt;&lt;/a&gt;创建子项目: </summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列2-服务注册中心</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%972-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%972-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</id>
    <published>2022-05-13T08:23:20.668Z</published>
    <updated>2022-05-13T10:00:23.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建子项目-eureka-server"><a href="#创建子项目-eureka-server" class="headerlink" title="创建子项目: eureka-server"></a>创建子项目: eureka-server</h1><p>pom.xml ，增加 spring-cloud-starter-netflix-eureka-server jar 包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;name&gt;eureka-server&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h1 id="启动类-EurekaServerApplication"><a href="#启动类-EurekaServerApplication" class="headerlink" title="启动类: EurekaServerApplication"></a>启动类: EurekaServerApplication</h1><ul><li>EurekaServer，它扮演的角色是注册中心，用于注册各种微服务，以便于其他微服务找到和访问。</li><li>EurekaServer 本身就是个 Springboot 微服务, 所以它有 @SpringBootApplication 注解。</li><li>@EnableEurekaServer 表示这是个 EurekaServer 。<br>完整代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package cn.peach;</span><br><span class="line"></span><br><span class="line">import cn.hutool.core.util.NetUtil;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class EurekaServerApplication</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //8761 这个端口是默认的，就不要修改了，后面的子项目，都会访问这个端口。</span><br><span class="line">        int port = 8761;</span><br><span class="line">        if(!NetUtil.isUsableLocalPort(port)) &#123;</span><br><span class="line">            System.err.printf(&quot;端口%d被占用了，无法启动%n&quot;, port );</span><br><span class="line">            System.exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        new SpringApplicationBuilder(EurekaServerApplication.class).properties(&quot;server.port=&quot; + port).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h1><ul><li>设置微服务的名称： eureka-server</li><li>hostname: localhost 表示主机名称。</li><li>registerWithEureka：false. 表示是否注册到服务器。 因为它本身就是服务器，所以就无需把自己注册到服务器了。</li><li>fetchRegistry: false. 表示是否获取服务器的注册信息，和上面同理，这里也设置为 false。</li><li>defaultZone： http:&#x2F;&#x2F;${eureka.instance.hostname}:${server.port}&#x2F;eureka&#x2F; 自己作为服务器，公布出来的地址。 比如后续某个微服务要把自己注册到 eureka server, 那么就要使用这个地址： <a href="http://localhost:8761/eureka/">http://localhost:8761/eureka/</a></li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    registerWithEureka: false</span><br><span class="line">    fetchRegistry: false</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><span class="line"> </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server</span><br></pre></td></tr></table></figure></li></ul><h2 id="启动并访问注册中心Eureka"><a href="#启动并访问注册中心Eureka" class="headerlink" title="启动并访问注册中心Eureka:"></a>启动并访问注册中心Eureka:</h2><p>运行 EurekaServerApplication，并访问：<a href="http://127.0.0.1:8761/%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%BA%EF%BC%9A8761%E3%80%82">http://127.0.0.1:8761/，默认端口号为：8761。</a><br><img src="/../../../assets/png/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8.png" alt="注册中心默认启动.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建子项目-eureka-server&quot;&gt;&lt;a href=&quot;#创建子项目-eureka-server&quot; class=&quot;headerlink&quot; title=&quot;创建子项目: eureka-server&quot;&gt;&lt;/a&gt;创建子项目: eureka-server&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud系列1-父子(聚合)项目</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%971-%E7%88%B6%E5%AD%90(%E8%81%9A%E5%90%88)%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud%E7%B3%BB%E5%88%971-%E7%88%B6%E5%AD%90(%E8%81%9A%E5%90%88)%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-05-13T06:05:45.854Z</published>
    <updated>2022-05-13T09:26:07.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud代码结构"><a href="#SpringCloud代码结构" class="headerlink" title="SpringCloud代码结构"></a>SpringCloud代码结构</h1><p><img src="/../../../assets/png/SpringCloud%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png" alt="SpringCloud代码结构.png" title="SpringCloud代码结构"></p><h1 id="创建父项目-spring-cloud-parent"><a href="#创建父项目-spring-cloud-parent" class="headerlink" title="创建父项目: spring-cloud-parent"></a>创建父项目: spring-cloud-parent</h1><p>修改pom：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p>注意： 父项目只有pom.xml文件， packaging值为pom.</p><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.6.RELEASE&lt;/version&gt;  &lt;!-- 踩坑:版本不对会导致Feign连接不上，亲测其它版本, 2.3.3.RELEASE version. --&gt;</span><br><span class="line">&lt;relativePath/&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;spring-cloud-parent&lt;/name&gt;</span><br><span class="line">&lt;description&gt;spring-cloud-parent project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Finchley.SR2&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h1 id="创建子项目-product-data-service"><a href="#创建子项目-product-data-service" class="headerlink" title="创建子项目: product-data-service"></a>创建子项目: product-data-service</h1><p>修改pom：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;groupId&gt;cn.peach&lt;/groupId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;relativePath&gt;../spring-cloud-parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;artifactId&gt;product-data-service&lt;/artifactId&gt;</span><br><span class="line">&lt;name&gt;product-data-service&lt;/name&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud代码结构&quot;&gt;&lt;a href=&quot;#SpringCloud代码结构&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud代码结构&quot;&gt;&lt;/a&gt;SpringCloud代码结构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/../../.</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud介绍</title>
    <link href="http://example.com/blog/Cloud/SpringCloud/SpringCloud/"/>
    <id>http://example.com/blog/Cloud/SpringCloud/SpringCloud/</id>
    <published>2022-05-12T10:23:36.531Z</published>
    <updated>2022-05-13T06:28:30.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识介绍："><a href="#基础知识介绍：" class="headerlink" title="基础知识介绍："></a>基础知识介绍：</h1><h2 id="单体架构系统："><a href="#单体架构系统：" class="headerlink" title="单体架构系统："></a>单体架构系统：</h2><p>单体架构就是所有功能，都放在一个应用里。</p><h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><p>便于开发，测试，部署也很方便，直接打成一个 jar 或者 war, 就什么都好了。</p><h3 id="弊端："><a href="#弊端：" class="headerlink" title="弊端："></a>弊端：</h3><p>要体现在高访问，高并发的上限是固定的。 比如一个单体架构，能够承受 1000次访问&#x2F;秒。 但是访问量达到 2000次&#x2F;秒的时候，就会非常卡顿，严重影响业务，并且仅仅依靠单体架构本身，很难突破这个瓶颈了。<br><img src="/../../../assets/png/%E5%8D%95%E4%BD%93%E7%BB%93%E6%9E%84.png" alt="单体结构.png" title="单体结构"></p><h2 id="集群和分布式："><a href="#集群和分布式：" class="headerlink" title="集群和分布式："></a>集群和分布式：</h2><p>既然单体架构会有性能上的瓶颈，那么总要解决呀。 解决办法通常就是采用集群和分布式来做。</p><h3 id="集群："><a href="#集群：" class="headerlink" title="集群："></a>集群：</h3><p>指一组相互独立的计算机，通过高速的网络组成一个计算机系统。服务器集群就是指将很多服务器集中起来一起进行同一种服务，在客户端看来就像是只有一个服务器。</p><h4 id="集群的特点和优势"><a href="#集群的特点和优势" class="headerlink" title="集群的特点和优势:"></a>集群的特点和优势:</h4><ul><li>高性能  </li><li>性价比   </li><li>可伸缩性<h4 id="集群的分类"><a href="#集群的分类" class="headerlink" title="集群的分类"></a>集群的分类</h4></li><li>负载均衡集群（Load balancing clusters）简称LBC</li><li>高可用性集群（High-availability clusters）简称HAC</li><li>高性能计算集群（High-perfomance clusters）简称HPC</li></ul><p><img src="/../../../assets/png/%E9%9B%86%E7%BE%A4.png" alt="集群.png" title="集群"></p><h3 id="分布式："><a href="#分布式：" class="headerlink" title="分布式："></a>分布式：</h3><p>指将不同的业务分布在不同的地方，而集群指的是将几台服务器集中在一起，实现同一业务。分布式中的每一个节点，都可以做集群，而集群并不一定就是分布式的。</p><h4 id="分布式一致性："><a href="#分布式一致性：" class="headerlink" title="分布式一致性："></a>分布式一致性：</h4><p>分布式系统中，一个问题是负载均衡，另外一个问题就是数据的一致性。</p><p>在分布式集群中，很难保障数据的一致性。在以往的单节点服务中，通常使用锁来实现，当发生并发冲突时 通过对锁的持有获得对象的操作权，从而保证数据在同一时刻只允许被一个请求操作。但是在集群中，若同样采用锁的机制，那么需要一台节点用来管理分配锁，当其他节点进行请求前，首先去获取锁从而获得执行权。但是这样会产生单节点问题，即若管理锁的节点down掉，那么整个集群将无法工作。同时，由于锁的机制会使整个集群变成串行化单节点的形式，失去了集群的意义。</p><p><img src="/../../../assets/png/%E5%88%86%E5%B8%83%E5%BC%8F.png" alt="分布式.png" title="分布式"></p><h3 id="分布式和集群的关系："><a href="#分布式和集群的关系：" class="headerlink" title="分布式和集群的关系："></a>分布式和集群的关系：</h3><ul><li>根据分布式的介绍看出，其主要的功能是用了将我们的系统模块化，将系统进行解耦的，方便我们的维护和开发的，但是其并不能解决我们的并发问题，也无法保证我们的系统在服务器宕机后的正常运转。</li><li>集群就恰好弥补了分布式的缺陷，集群就是多个服务器处理相同的业务，这在一方面可以解决或者说改善我们系统的并发问题，一方面可以解决我们服务器如果出现一定数量的宕机后，系统仍然可以正常运转。</li></ul><h1 id="SpringCloud介绍："><a href="#SpringCloud介绍：" class="headerlink" title="SpringCloud介绍："></a>SpringCloud介绍：</h1><p>SpringCloud 就是一套工具。</p><p>Spring Cloud 并不是一个项目，而是一组项目的集合。包含了很多的子项目，每一个子项目都是一种微服务开发过程中遇到的问题的一种解决方案。它利用 Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><h2 id="子项目介绍"><a href="#子项目介绍" class="headerlink" title="子项目介绍:"></a>子项目介绍:</h2><ul><li>Spring Cloud Config：集中配置管理工具，分布式系统中统一的外部配置管理，可以支持客户端配置的刷新及加密、解密操作, 可以让你把配置放到远程服务器，目前支持本地存储、Git 以及 Subversion。</li><li>Spring Cloud Netflix：针对多种 Netflix 组件提供的开发工具包，其中包括 Eureka、Hystrix、Ribbon、Feign、Zuul、Archaius 等组件, 如下:</li><li><ul><li>Eureka：服务治理组件，包括服务端的注册中心和客户端的服务发现机制；</li></ul></li><li><ul><li>Hystrix：服务容错组件，实现了断路器模式，为依赖服务的出错和延迟提供了容错能力；</li></ul></li><li><ul><li>Ribbon：负载均衡的服务调用组件，具有多种负载均衡调用策略；</li></ul></li><li><ul><li>Feign：基于Ribbon和Hystrix的声明式服务调用组件；</li></ul></li><li><ul><li>Zuul：API网关组件，对请求提供路由及过滤功能；</li></ul></li><li><ul><li>Archaius：基于java的配置管理类库，主要用于多配置存储的动态获取。</li></ul></li><li>Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与 Spring Cloud Config 联合实现热部署。</li><li>Spring Cloud Consul：封装了 Consul 操作，consul 是一个服务发现与配置工具，与 Docker 容器可以无缝集成。</li><li>Spring Cloud Security ：安全工具包，对Zuul代理中的负载均衡OAuth2客户端及登录认证进行支持。</li><li>Spring Cloud Sleuth：日志收集工具包，封装了 Dapper，Zipkin 和 HTrace 操作. Spring Cloud 应用的分布式跟踪实现。</li><li>Spring Cloud Stream：数据流操作开发包，封装了与 Redis，Rabbit、Kafka 等发送接收消息，实现的消息微服务。</li><li>Spring Cloud Task：用于快速构建短暂、有限数据处理任务的微服务框架，用于向应用中添加功能性和非功能性的特性。</li><li>Spring Cloud Zookeeper：基于 ZooKeeper 的服务发现与配置管理组件。</li><li>Spring Cloud Gateway：API网关组件，对请求提供路由及过滤功能, Spring Cloud 网关相关的整合实现。</li><li>Spring Cloud Aws：用于简化整合 Amazon Web Service 的组件。</li><li>Spring Cloud Cli：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</li><li>Spring Cloud Commons：服务发现、负载均衡、熔断机制这种模式为 Spring Cloud 客户端提供了一个通用的抽象层。</li><li>Spring Cloud Contract：Spring Cloud Contract是一个总体项目，其中包含帮助用户成功实施消费者驱动合同方法的解决方案(契约测试)。</li><li>Spring Cloud Cloudfoundry：通过 Oauth2 协议绑定服务到 CloudFoundry，CloudFoundry 是 VMware 推出的开源 PaaS 云平台。</li><li>Spring Cloud OpenFeign：基于Ribbon和Hystrix的声明式服务调用组件，可以动态创建基于Spring MVC注解的接口实现用于服务调用，在Spring Cloud 2.0中已经取代Feign成为了一等公民。</li></ul><p><img src="/../../../assets/png/SpringCloud.png" alt="SpringCloud.png" title="SpringCloud"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识介绍：&quot;&gt;&lt;a href=&quot;#基础知识介绍：&quot; class=&quot;headerlink&quot; title=&quot;基础知识介绍：&quot;&gt;&lt;/a&gt;基础知识介绍：&lt;/h1&gt;&lt;h2 id=&quot;单体架构系统：&quot;&gt;&lt;a href=&quot;#单体架构系统：&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    <category term="SpringCloud" scheme="http://example.com/categories/Cloud/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA数据结构和算法</title>
    <link href="http://example.com/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</id>
    <published>2022-05-12T09:35:21.866Z</published>
    <updated>2022-05-12T07:38:59.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA数据结构和算法："><a href="#JAVA数据结构和算法：" class="headerlink" title="JAVA数据结构和算法："></a>JAVA数据结构和算法：</h1><hr><p><code>数据结构分类：线性结构和非线性结构：</code></p><h1 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h1><p><code>什么是线性和非线性；</code></p><p>个人的理解是：数据结构中线性结构指的是数据元素之间存在着“一对一”的线性关系的数据结构；<br>线性结构包括：数组，链表，队列，栈；<br>非线性结构包括：树，图，表；</p><p>详解：<br>一.线性结构</p><p>1.数组<br>特点：我们都知道数组中的元素在内存中连续存储的，可以根据是下标快速访问元素，因此，查询速度很快，然而插入和删除时，需要对元素移动空间，比较慢。<br>数组使用场景：频繁查询，很少增加和删除的情况。</p><p>2.链表<br>特点：元素可以不连续内存中，是以索引将数据联系起来的，当查询元素的时候需要从头开始查询，所以效率比较低，然而添加和删除的只需要修改索引就可以了<br>链表使用场景：少查询，需要频繁的插入或删除情况</p><p>3.队列<br>特点：先进先出，<br>队列使用场景：多线程阻塞队列管理非常有用</p><p>4.栈<br>特点：先进后出，就像一个箱子，<br>栈使用场景：实现递归以及表示式</p><p>5.数组与链表的区别<br>数组连续，链表不连续（从数据存储形式来说）<br>数组内存静态分配，链表动态分配<br>数组查询复杂度O(1)，链表查询复杂度O(n)<br>数组添加或删除，复杂度O(n),链表添加删除，复杂度O(1)<br>数组从栈中分配内存。链表从堆中分配内存。</p><p><code>补充：时间复杂度O(1), O(n), O(logn), O(nlogn)指什么 </code><br>  描述算法复杂度时,常用o(1), o(n), o(logn), o(nlogn)表示对应算法的时间复杂度，是算法的时空复杂度的表示。不仅仅用于表示时间复杂度，也用于表示空间复杂度。<br>O后面的括号中有一个函数，指明某个算法的耗时&#x2F;耗空间与数据增长量之间的关系。其中的n代表输入数据的量。</p><blockquote><p>O(1)：<br>  是最低的时空复杂度了，代表耗时&#x2F;耗空间与输入数据大小无关，无论输入数据增大多少倍，耗时&#x2F;耗空间都不变。 <code>哈希算法</code>就是典型的O(1)时间复杂度，无论数据规模多大，都可以在一次计算后找到目标（不考虑冲突的话）</p></blockquote><blockquote><p> O(n)：<br> 代表数据量增大几倍，耗时也增大几倍。比如常见的<code>遍历算法</code>。</p></blockquote><blockquote><p>O(n^2)：<br>  代表数据量增大n倍时，耗时增大n的平方倍，这是比线性更高的时间复杂度。比如<code>冒泡排序</code>，就是典型的O(n^2)的算法，对n个数排序，需要扫描n×n次。</p></blockquote><blockquote><p>O(logn)：<br>  代表当数据增大n倍时，耗时增大logn倍（这里的log是以2为底的，比如，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度）。<code>二分查找</code>就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标。</p></blockquote><blockquote><p>O(nlogn)：<br>  代表n乘以logn，当数据增大256倍时，耗时增大256*8&#x3D;2048倍。这个复杂度高于线性低于平方。<code>归并排序</code>就是O(nlogn)的时间复杂度。</p></blockquote><hr><h1 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h1><p>c1）插入排序（直接插入排序、希尔排序） </p><blockquote><p>2）交换排序（冒泡排序、快速排序）<br>3）选择排序（直接选择排序、堆排序）<br>4）归并排序<br>5）分配排序（基数排序）<br><code>特点:</code><br>所需辅助空间最多：归并排序<br>所需辅助空间最少：堆排序<br>平均速度最快：快速排序<br>不稳定：快速排序，希尔排序，堆排序</p></blockquote><ul><li>直接插入排序<blockquote><p>基本思想：在要排序的一组数中，假设前面(n-1)[n&gt;&#x3D;2] 个数已经是排好顺序的，现在要把第n 个数插到前面的有序数中，使得这 n个数也是排好顺序的。如此反复循环，直到全部排好顺序</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">     * 插入排序法 </span><br><span class="line">     *  </span><br><span class="line">     * @param datas </span><br><span class="line">     */  </span><br><span class="line">    public static int[] sortInsert(int[] datas) &#123;  </span><br><span class="line">        for (int i = 1; i &lt; datas.length; i++) &#123;  </span><br><span class="line">            int j = i - 1;  </span><br><span class="line">            AlgorithmUtil.temp = datas[i];  </span><br><span class="line">            for (; j &gt;= 0 &amp;&amp; AlgorithmUtil.temp &lt; datas[j]; j--) &#123;  </span><br><span class="line">                datas[j + 1] = datas[j];  </span><br><span class="line">            &#125;  </span><br><span class="line">            datas[j + 1] = AlgorithmUtil.temp;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return datas;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><ul><li>简单选择排序 <blockquote><p>基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">    * 选择排序 </span><br><span class="line">    *  </span><br><span class="line">    * @return </span><br><span class="line">    */  </span><br><span class="line">   public static int[] sortSelect(int[] datas) &#123;  </span><br><span class="line">       for (int i = 0; i &lt; datas.length; i++) &#123;  </span><br><span class="line">           int index = i;  </span><br><span class="line">           for (int j = i + 1; j &lt; datas.length; j++) &#123;  </span><br><span class="line">               if (datas[j] &lt; datas[index])  </span><br><span class="line">                   index = j;  </span><br><span class="line">           &#125;  </span><br><span class="line">           if (i != index)  </span><br><span class="line">               AlgorithmUtil.swap(datas, i, index);  </span><br><span class="line">       &#125;  </span><br><span class="line">       return datas;  </span><br><span class="line">   &#125;  </span><br></pre></td></tr></table></figure><ul><li>冒泡排序<blockquote><p>基本思想：在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">     * 冒泡排序 </span><br><span class="line">     *  </span><br><span class="line">     * @return </span><br><span class="line">     */  </span><br><span class="line">    public static int[] sortBubble(int[] datas) &#123;  </span><br><span class="line">        for (int i = 0; i &lt; datas.length - 1; i++) &#123;  </span><br><span class="line">            for (int j = 0; j &lt; datas.length - 1 - i; j++) &#123;  </span><br><span class="line">                if (datas[j] &gt; datas[j + 1])  </span><br><span class="line">                    AlgorithmUtil.swap(datas, j, j + 1);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return datas;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><ul><li>快速排序<blockquote><p>基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">     * 快速排序；分割数组 </span><br><span class="line">     *  </span><br><span class="line">     * @param datas </span><br><span class="line">     */  </span><br><span class="line">    public static int QuickPartition(int[] datas, int left, int right) &#123;  </span><br><span class="line">        int pivot = datas[left];  </span><br><span class="line">        while (left &lt; right) &#123;  </span><br><span class="line">            while (left &lt; right &amp;&amp; datas[right] &gt;= pivot)  </span><br><span class="line">                --right;  </span><br><span class="line">            datas[left] = datas[right]; // 将比枢轴小的元素移到低端，此时right位相当于空，等待低位比pivotkey大的数补上  </span><br><span class="line">            while (left &lt; right &amp;&amp; datas[left] &lt;= pivot)  </span><br><span class="line">                ++left;  </span><br><span class="line">            datas[right] = datas[left]; // 将比枢轴大的元素移到高端，此时left位相当于空，等待高位比pivotkey小的数补上  </span><br><span class="line">        &#125;  </span><br><span class="line">        datas[left] = pivot; // 当left == right，完成一趟快速排序，此时left位相当于空，等待pivotkey补上  </span><br><span class="line">        return left;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /** </span><br><span class="line">     * 快速排序；递归返回数组 </span><br><span class="line">     *  </span><br><span class="line">     * @param datas </span><br><span class="line">     */  </span><br><span class="line">    public static int[] sortQuick(int[] datas, int left, int right) &#123;  </span><br><span class="line">        if (left &lt; right) &#123;  </span><br><span class="line">            int data = QuickPartition(datas, left, right);  </span><br><span class="line">            sortQuick(datas, left, data - 1);  </span><br><span class="line">            sortQuick(datas, data + 1, right);  </span><br><span class="line">        &#125;  </span><br><span class="line">        return datas;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure><ul><li>1.冒泡算法，2.选择算法，3.快速算法。4.插入算法，5.希尔算法，6.堆算法<blockquote><p>基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class AlgorithmUtil &#123;  </span><br><span class="line"></span><br><span class="line">public static int temp,index = 0;  </span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line"> * 临时值交换 </span><br><span class="line"> *  </span><br><span class="line"> * @param datas </span><br><span class="line"> *            数组 </span><br><span class="line"> * @param i </span><br><span class="line"> * @param j </span><br><span class="line"> */  </span><br><span class="line">public static void swap(int[] datas, int i, int j) &#123;  </span><br><span class="line">    temp = datas[i];  </span><br><span class="line">    datas[i] = datas[j];  </span><br><span class="line">    datas[j] = temp;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line"> * 扩充数组长度 </span><br><span class="line"> *  </span><br><span class="line"> * @param datas </span><br><span class="line"> * @param value </span><br><span class="line"> * @return </span><br><span class="line"> */  </span><br><span class="line">public static int[] expandArray(int[] datas, int value) &#123;  </span><br><span class="line">    if (datas.length &lt;= index) &#123;  </span><br><span class="line">        int[] arrays = new int[datas.length * 2];  </span><br><span class="line">        System.arraycopy(datas, 0, arrays, 0, datas.length);  </span><br><span class="line">        datas = arrays;  </span><br><span class="line">    &#125;  </span><br><span class="line">    datas[index] = value;  </span><br><span class="line">    index++;  </span><br><span class="line">    return datas;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JAVA数据结构和算法：&quot;&gt;&lt;a href=&quot;#JAVA数据结构和算法：&quot; class=&quot;headerlink&quot; title=&quot;JAVA数据结构和算法：&quot;&gt;&lt;/a&gt;JAVA数据结构和算法：&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;数据结构分类：线性结构和非线性结构：&lt;</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="JAVA数据结构和算法" scheme="http://example.com/tags/JAVA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>DB</title>
    <link href="http://example.com/blog/DB/oracle/db2/"/>
    <id>http://example.com/blog/DB/oracle/db2/</id>
    <published>2022-05-12T09:35:21.862Z</published>
    <updated>2022-05-12T06:36:52.871Z</updated>
    
    <content type="html"><![CDATA[<p>DB</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DB&lt;/p&gt;
</summary>
      
    
    
    
    <category term="DB" scheme="http://example.com/categories/DB/"/>
    
    <category term="oracle" scheme="http://example.com/categories/DB/oracle/"/>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/blog/DB/mysql/test/"/>
    <id>http://example.com/blog/DB/mysql/test/</id>
    <published>2022-05-12T09:35:21.857Z</published>
    <updated>2022-05-12T07:43:03.103Z</updated>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;test&lt;/p&gt;
</summary>
      
    
    
    
    <category term="DB" scheme="http://example.com/categories/DB/"/>
    
    <category term="mysql" scheme="http://example.com/categories/DB/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql1</title>
    <link href="http://example.com/blog/DB/mysql/mysql/"/>
    <id>http://example.com/blog/DB/mysql/mysql/</id>
    <published>2022-05-12T09:35:21.855Z</published>
    <updated>2022-05-12T07:43:55.226Z</updated>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;test&lt;/p&gt;
</summary>
      
    
    
    
    <category term="DB" scheme="http://example.com/categories/DB/"/>
    
    <category term="mysql" scheme="http://example.com/categories/DB/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/blog/index/"/>
    <id>http://example.com/blog/index/</id>
    <published>2022-05-12T09:35:21.848Z</published>
    <updated>2022-05-12T07:46:31.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Welcome-TaoLiu’s-Blog"><a href="#Welcome-TaoLiu’s-Blog" class="headerlink" title="Welcome TaoLiu’s Blog"></a>Welcome TaoLiu’s Blog</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Welcome-TaoLiu’s-Blog&quot;&gt;&lt;a href=&quot;#Welcome-TaoLiu’s-Blog&quot; class=&quot;headerlink&quot; title=&quot;Welcome TaoLiu’s Blog&quot;&gt;&lt;/a&gt;Welcome TaoLiu’s Blog&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>cloud基础</title>
    <link href="http://example.com/blog/Cloud/Cloud%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/blog/Cloud/Cloud%E5%9F%BA%E7%A1%80/</id>
    <published>2022-05-12T09:35:21.844Z</published>
    <updated>2022-05-12T06:39:01.563Z</updated>
    
    <content type="html"><![CDATA[<p>cloud基础</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cloud基础&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Cloud" scheme="http://example.com/categories/Cloud/"/>
    
    
  </entry>
  
</feed>
